{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nombre de instancia de Data Factory",
			"defaultValue": "df-clt-pre"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_BEG_DM_INTER_INTRA_IND_9_029')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Maping parametrizado para calcular la mayoria de indicadores intraanuales y interanuales de BEG. Se calculan todos a nivel de Biblioteca, distrito, municipio, comarca, ambito territorial y nacional.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMbegFACTindicadors"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DMbegDIMbiblioteques"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TERRITORIAL_COMARCA",
								"type": "DatasetReference"
							},
							"name": "DMterDIMcomarca"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TERRITORIAL_MUNICIPI",
								"type": "DatasetReference"
							},
							"name": "DMterDIMmunicipi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS_INTER_INTRA",
								"type": "DatasetReference"
							},
							"name": "DMbegFACTindicadors2"
						}
					],
					"transformations": [
						{
							"name": "DCcalculINDbib"
						},
						{
							"name": "selectBIBLIOTEQUESlocalitats"
						},
						{
							"name": "aggVALORbib"
						},
						{
							"name": "fltINDICADORnumerador"
						},
						{
							"name": "numBIBLIOTECA"
						},
						{
							"name": "aggVALORdist"
						},
						{
							"name": "aggVALORmuni"
						},
						{
							"name": "IJbiblioteques4"
						},
						{
							"name": "IJmunicipi4"
						},
						{
							"name": "IJcomarca4"
						},
						{
							"name": "aggVALORcomarca"
						},
						{
							"name": "aggVALORambit"
						},
						{
							"name": "aggVALORnacional"
						},
						{
							"name": "fltINDICADORdenominador"
						},
						{
							"name": "denBIBLIOTECA"
						},
						{
							"name": "fltDATES"
						},
						{
							"name": "dcPERIODE"
						},
						{
							"name": "DCcalculINDdist"
						},
						{
							"name": "DCcalculINDmuni"
						},
						{
							"name": "DCcalculINDcom"
						},
						{
							"name": "DCcalculINDambitTERR"
						},
						{
							"name": "DCcalculINDnacion"
						},
						{
							"name": "joinNUMERAdenominaBIB"
						},
						{
							"name": "unionDENbibliotecas"
						},
						{
							"name": "joinNUMERAdenominaNACIONAL"
						},
						{
							"name": "joinNUMERAdenominaMUNI"
						},
						{
							"name": "joinNUMERAdenominaDIST"
						},
						{
							"name": "joinNUMERAdenominaCOMARCA"
						},
						{
							"name": "joinNUMERAdenominaAMBIT"
						},
						{
							"name": "NACIONAL"
						},
						{
							"name": "BIBLIOTECA"
						},
						{
							"name": "MUNICIPI"
						},
						{
							"name": "DISTRICTE"
						},
						{
							"name": "COMARCA"
						},
						{
							"name": "AMBITterritorial"
						},
						{
							"name": "LJnan"
						},
						{
							"name": "LJmun"
						},
						{
							"name": "LJdis"
						},
						{
							"name": "LJcom"
						},
						{
							"name": "LJamb"
						},
						{
							"name": "selectCOLUMNAS"
						},
						{
							"name": "dcFLAGinterINTRA"
						},
						{
							"name": "dcINDICADORnumerador"
						},
						{
							"name": "dcINDICADORdenominador"
						},
						{
							"name": "sNACIONALnum"
						},
						{
							"name": "sNACIONALden"
						},
						{
							"name": "sBIBnum"
						},
						{
							"name": "sBIBden"
						},
						{
							"name": "sMUNInum"
						},
						{
							"name": "sMUNIden"
						},
						{
							"name": "sDISTnum"
						},
						{
							"name": "sDISTden"
						},
						{
							"name": "sCOMARCAnum"
						},
						{
							"name": "sCOMARCAden"
						},
						{
							"name": "sAMBITnum"
						},
						{
							"name": "sAMBITden"
						},
						{
							"name": "NACIONALden"
						},
						{
							"name": "BIBden"
						},
						{
							"name": "MUNIden"
						},
						{
							"name": "DISTden"
						},
						{
							"name": "COMARCAden"
						},
						{
							"name": "AMBITden"
						},
						{
							"name": "IJbibliotequesDIM"
						},
						{
							"name": "IJmunicipiDIM"
						},
						{
							"name": "IJcomarcaDIM"
						},
						{
							"name": "fltPOBLACION"
						},
						{
							"name": "aggPOBLACION"
						},
						{
							"name": "dcDESCtramPOBLACIO"
						},
						{
							"name": "ijDESCtramPOBLACIO"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "fltINDICADORdenominador2"
						},
						{
							"name": "dcINDICADORdenominador2"
						},
						{
							"name": "den2BIBLIOTECA"
						},
						{
							"name": "unionDEN2bibliotecas"
						},
						{
							"name": "sNACIONALden2"
						},
						{
							"name": "NACIONALden2"
						},
						{
							"name": "joinNUMERAdenomina2NACIONAL"
						},
						{
							"name": "sCOMARCAden2"
						},
						{
							"name": "COMARCAden2"
						},
						{
							"name": "joinNUMERAdenomina2COMARCA"
						},
						{
							"name": "sAMBITden2"
						},
						{
							"name": "AMBITden2"
						},
						{
							"name": "joinNUMERAdenominaAMBIT2"
						},
						{
							"name": "sMUNIden2"
						},
						{
							"name": "MUNIden2"
						},
						{
							"name": "joinNUMERAdenominaMUNI2"
						},
						{
							"name": "sDISTden2"
						},
						{
							"name": "DISTden2"
						},
						{
							"name": "joinNUMERAdenominaDIST2"
						},
						{
							"name": "sBIBnum2"
						},
						{
							"name": "BIBden2"
						},
						{
							"name": "joinNUMERAdenominaBIB2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     P_DATA_INI as integer (20220101),",
						"     P_DATA_FI as integer (20220101),",
						"     P_FLAG_INTER as integer (1),",
						"     P_NOM_IND_CALC as string (\"IND_X_X\"),",
						"     P_IND_ORIGEN_NUMERADOR as string[] ([\"IND_X_X\",\"IND_Y_Y\"]),",
						"     P_IND_ORIGEN_DENOMINADOR as string[] ([\"IND_X_X\",\"IND_Y_Y\"]),",
						"     P_IND_ORIGEN_DENOMINADOR2 as string[] ([\"IND_X_X\",\"IND_Y_Y\"])",
						"}",
						"source(output(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as decimal(17,6),",
						"          DATA_INSERCIO as date,",
						"          DATA_PERIODE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMbegFACTindicadors",
						"source(output(",
						"          ID_BIBLIOTECA as integer,",
						"          ID_AGENCY as string,",
						"          ID_USUARI as integer,",
						"          CODI_BIBLIOTECA as string,",
						"          ID_TIPUS as integer,",
						"          ID_MODUL as integer,",
						"          CODI_NIDEN as string,",
						"          ID_ESTAT as integer,",
						"          DESC_BIBLIOTECA as string,",
						"          DATA_ALTA_BIBLIO as timestamp,",
						"          DATA_BAIXA_BIBLIO as timestamp,",
						"          ID_TIPUS_VIA as integer,",
						"          DESC_VIA as string,",
						"          NUM_VIA as string,",
						"          INE_MUNICIPI as string,",
						"          ID_DISTRICTE as integer,",
						"          CP as string,",
						"          UTMX as double,",
						"          UTMY as double,",
						"          NUM_LONGITUD as double,",
						"          NUM_LATITUD as double,",
						"          NUM_TELEFON as string,",
						"          NUM_EXTENSIO as string,",
						"          NUM_FAX as string,",
						"          DESC_EMAIL as string,",
						"          DESC_WEB as string,",
						"          FLAG_BEG as boolean,",
						"          FLAG_SLPC as boolean,",
						"          ID_MAPA as integer,",
						"          ID_CATEGORIA as integer,",
						"          ID_TITULARITAT as integer,",
						"          ID_FORMA_ACCES as integer,",
						"          ES_CATALEG_COLECTIU_CCLP as boolean,",
						"          WEB_CATALEG_COLECTIU_CCLP as string,",
						"          ES_CATALEG_COLECTIU_DIP_BCN as boolean,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN as string,",
						"          ES_CATALEG_COLECTIU_CCUC as boolean,",
						"          WEB_CATALEG_COLECTIU_CCUC as string,",
						"          ES_CATALEG_COLECTIU_BEG as boolean,",
						"          WEB_CATALEG_COLECTIU_BEG as string,",
						"          ES_CATALEG_COLECTIU_ALTRES as boolean,",
						"          WEB_CATALEG_COLECTIU_ALTRES as string,",
						"          ID_DIRECTOR_TRACTAMENT as integer,",
						"          DESC_DIRECTOR_NOMB as string,",
						"          DESC_DIRECTOR_PRIMER_COGNOM as string,",
						"          DESC_DIRECTOR_SEGON_COGNOM as string,",
						"          FLAG_ADAPTADA as boolean,",
						"          DESC_OBSERVACIONS as string,",
						"          OBS_ITINERARIS as string,",
						"          DATA_ALTA as timestamp,",
						"          ID_USUARI_ALTA as integer,",
						"          DATA_MODIF as timestamp,",
						"          ID_USUARI_MODIF as integer,",
						"          DATA_BAIXA as timestamp,",
						"          ID_USUARI_BAIXA as integer,",
						"          ID_ADSCRIPCIO as integer,",
						"          ID_CATEGORIA_ESP as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMbegDIMbiblioteques",
						"source(output(",
						"          INE_COMARCA as string,",
						"          ID_AMBIT_TERRITORIAL as string,",
						"          DESC_COMARCA as string,",
						"          DESC_COMARCA_CAT as string,",
						"          CODI_SSTT as integer,",
						"          DATA_BAIXA as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMterDIMcomarca",
						"source(output(",
						"          INE_MUNICIPI as string,",
						"          INE_COMARCA as string,",
						"          INE_PROVINCIA as string,",
						"          DESC_MUNICIPI as string,",
						"          DESC_MUNICIPI_CAT as string,",
						"          CP as string,",
						"          NUM_ALTITUD as integer,",
						"          NUM_SUPERFICIE as decimal(6,2),",
						"          FLAG_CAPITAL_PAIS as boolean,",
						"          FLAG_CAPITAL_COMUNIDAD_AUTONOMA as boolean,",
						"          FLAG_CAPITAL_PROVINCIA as boolean,",
						"          FLAG_CAPITAL_COMARCA as boolean,",
						"          ID_AMBIT_TERRITORIAL as string,",
						"          CODI_SSTT as integer,",
						"          DATA_BAIXA as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMterDIMmunicipi",
						"joinNUMERAdenominaBIB2 derive(ID_INDICADOR = $P_NOM_IND_CALC,",
						"          VALOR_BIB = iif(isNull(VALOR / VALOR_den / VALOR_den2), \r",
						"    toFloat(0), \r",
						"    toFloat(VALOR / VALOR_den / VALOR_den2) \r",
						"    )) ~> DCcalculINDbib",
						"DMbegDIMbiblioteques select(mapColumn(",
						"          ID_BIBLIOTECA,",
						"          CODI_BIBLIOTECA,",
						"          INE_MUNICIPI,",
						"          ID_DISTRICTE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectBIBLIOTEQUESlocalitats",
						"unionDENbibliotecas aggregate(groupBy(CODI_BIBLIOTECA,",
						"          FLAG_NUM_DEM,",
						"          DATA_PERIODE),",
						"     VALOR = sum(IND_VALOR)) ~> aggVALORbib",
						"dcPERIODE filter(contains($P_IND_ORIGEN_NUMERADOR, #item == CODI_INDICADOR)) ~> fltINDICADORnumerador",
						"dcINDICADORnumerador select(mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          FLAG_NUM_DEM,",
						"          IND_VALOR,",
						"          DATA_PERIODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> numBIBLIOTECA",
						"IJbiblioteques4 aggregate(groupBy(ID_DISTRICTE,",
						"          FLAG_NUM_DEM,",
						"          DATA_PERIODE),",
						"     VALOR = sum(IND_VALOR)) ~> aggVALORdist",
						"IJbiblioteques4 aggregate(groupBy(INE_MUNICIPI,",
						"          FLAG_NUM_DEM,",
						"          DATA_PERIODE),",
						"     VALOR = sum(IND_VALOR)) ~> aggVALORmuni",
						"unionDENbibliotecas, selectBIBLIOTEQUESlocalitats join(unionDENbibliotecas@CODI_BIBLIOTECA == selectBIBLIOTEQUESlocalitats@CODI_BIBLIOTECA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IJbiblioteques4",
						"IJbiblioteques4, DMterDIMmunicipi join(selectBIBLIOTEQUESlocalitats@INE_MUNICIPI == DMterDIMmunicipi@INE_MUNICIPI,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IJmunicipi4",
						"IJmunicipi4, DMterDIMcomarca join(DMterDIMmunicipi@INE_COMARCA == DMterDIMcomarca@INE_COMARCA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IJcomarca4",
						"IJmunicipi4 aggregate(groupBy(INE_COMARCA,",
						"          FLAG_NUM_DEM,",
						"          DATA_PERIODE),",
						"     VALOR = sum(IND_VALOR)) ~> aggVALORcomarca",
						"IJcomarca4 aggregate(groupBy(DMterDIMcomarca@ID_AMBIT_TERRITORIAL,",
						"          FLAG_NUM_DEM,",
						"          DATA_PERIODE),",
						"     VALOR = sum(IND_VALOR)) ~> aggVALORambit",
						"unionDENbibliotecas aggregate(groupBy(FLAG_NUM_DEM,",
						"          DATA_PERIODE),",
						"     VALOR = sum(IND_VALOR)) ~> aggVALORnacional",
						"dcPERIODE filter(contains($P_IND_ORIGEN_DENOMINADOR, #item == CODI_INDICADOR)) ~> fltINDICADORdenominador",
						"dcINDICADORdenominador select(mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          FLAG_NUM_DEM,",
						"          IND_VALOR,",
						"          DATA_PERIODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> denBIBLIOTECA",
						"DMbegFACTindicadors filter(iif($P_FLAG_INTER == 1,",
						"    year(DATA_PERIODE) <= year(toDate(toString($P_DATA_FI),\"yyyyMMdd\"))",
						"    &&",
						"    year(DATA_PERIODE) >= year(toDate(toString($P_DATA_INI),\"yyyyMMdd\"))",
						"    ,",
						"    DATA_PERIODE < addDays(toDate(toString($P_DATA_FI),\"yyyyMMdd\"),1)",
						"    &&",
						"    DATA_PERIODE >= toDate(toString($P_DATA_INI),\"yyyyMMdd\")",
						")) ~> fltDATES",
						"fltDATES derive(DATA_PERIODE = iif($P_FLAG_INTER == 1,\r",
						"    toDate(concat(toString(year(DATA_PERIODE)),\"-12-01\"),\"yyyy-MM-dd\"),\r",
						"    DATA_PERIODE\r",
						")) ~> dcPERIODE",
						"joinNUMERAdenominaDIST2 derive(ID_INDICADOR = $P_NOM_IND_CALC,",
						"          VALOR_DIS = iif(isNull(VALOR / VALOR_den / VALOR_den2), \r",
						"    toFloat(0), \r",
						"    toFloat(VALOR / VALOR_den / VALOR_den2) \r",
						"    )) ~> DCcalculINDdist",
						"joinNUMERAdenominaMUNI2 derive(ID_INDICADOR = $P_NOM_IND_CALC,",
						"          VALOR_MUN = iif(isNull(VALOR / VALOR_den / VALOR_den2), \r",
						"    toFloat(0), \r",
						"    toFloat(VALOR / VALOR_den / VALOR_den2) \r",
						"    )) ~> DCcalculINDmuni",
						"joinNUMERAdenomina2COMARCA derive(ID_INDICADOR = $P_NOM_IND_CALC,",
						"          VALOR_COM = iif(isNull(VALOR / VALOR_den / VALOR_den2), \r",
						"    toFloat(0), \r",
						"    toFloat(VALOR / VALOR_den / VALOR_den2) \r",
						"    )) ~> DCcalculINDcom",
						"joinNUMERAdenominaAMBIT2 derive(ID_INDICADOR = $P_NOM_IND_CALC,",
						"          VALOR_AMB = iif(isNull(VALOR / VALOR_den / VALOR_den2), \r",
						"    toFloat(0), \r",
						"    toFloat(VALOR / VALOR_den / VALOR_den2) \r",
						"    )) ~> DCcalculINDambitTERR",
						"joinNUMERAdenomina2NACIONAL derive(ID_INDICADOR = $P_NOM_IND_CALC,",
						"          VALOR_NAN = iif(isNull(VALOR / VALOR_den / VALOR_den2),\r",
						"    toFloat(0),\r",
						"    toFloat(VALOR / VALOR_den / VALOR_den2)\r",
						"    )) ~> DCcalculINDnacion",
						"sBIBnum, BIBden join(CODI_BIBLIOTECA == CODI_BIBLIOTECA_den",
						"     && DATA_PERIODE == DATA_PERIODE_den,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaBIB",
						"unionDEN2bibliotecas, denBIBLIOTECA union(byName: true)~> unionDENbibliotecas",
						"sNACIONALnum, NACIONALden join(DATA_PERIODE == DATA_PERIODE_den,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaNACIONAL",
						"sMUNInum, MUNIden join(INE_MUNICIPI == INE_MUNICIPI_den",
						"     && DATA_PERIODE == DATA_PERIODE_den,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaMUNI",
						"sDISTnum, DISTden join(ID_DISTRICTE == ID_DISTRICTE_den",
						"     && DATA_PERIODE == DATA_PERIODE_den,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaDIST",
						"sCOMARCAnum, COMARCAden join(INE_COMARCA == INE_COMARCA_den",
						"     && DATA_PERIODE == DATA_PERIODE_den,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaCOMARCA",
						"sAMBITnum, AMBITden join(ID_AMBIT_TERRITORIAL == ID_AMBIT_TERRITORIAL_den",
						"     && DATA_PERIODE == DATA_PERIODE_den,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaAMBIT",
						"DCcalculINDnacion select(mapColumn(",
						"          DATA_PERIODE,",
						"          ID_INDICADOR,",
						"          VALOR_NAN",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NACIONAL",
						"DCcalculINDbib select(mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          DATA_PERIODE,",
						"          ID_INDICADOR,",
						"          VALOR_BIB",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BIBLIOTECA",
						"DCcalculINDmuni select(mapColumn(",
						"          INE_MUNICIPI,",
						"          DATA_PERIODE,",
						"          ID_INDICADOR,",
						"          VALOR_MUN",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MUNICIPI",
						"DCcalculINDdist select(mapColumn(",
						"          ID_DISTRICTE,",
						"          DATA_PERIODE,",
						"          ID_INDICADOR,",
						"          VALOR_DIS",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DISTRICTE",
						"DCcalculINDcom select(mapColumn(",
						"          INE_COMARCA,",
						"          DATA_PERIODE,",
						"          ID_INDICADOR,",
						"          VALOR_COM",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> COMARCA",
						"DCcalculINDambitTERR select(mapColumn(",
						"          ID_AMBIT_TERRITORIAL,",
						"          DATA_PERIODE,",
						"          ID_INDICADOR,",
						"          VALOR_AMB",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AMBITterritorial",
						"BIBLIOTECA, NACIONAL join(BIBLIOTECA@DATA_PERIODE == NACIONAL@DATA_PERIODE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LJnan",
						"IJbibliotequesDIM, MUNICIPI join(BIBLIOTECA@DATA_PERIODE == MUNICIPI@DATA_PERIODE",
						"     && DMbegDIMbiblioteques@INE_MUNICIPI == MUNICIPI@INE_MUNICIPI,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LJmun",
						"LJmun, DISTRICTE join(BIBLIOTECA@DATA_PERIODE == DISTRICTE@DATA_PERIODE",
						"     && DMbegDIMbiblioteques@ID_DISTRICTE == DISTRICTE@ID_DISTRICTE,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LJdis",
						"IJmunicipiDIM, COMARCA join(BIBLIOTECA@DATA_PERIODE == COMARCA@DATA_PERIODE",
						"     && DMterDIMmunicipi@INE_COMARCA == COMARCA@INE_COMARCA,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LJcom",
						"IJcomarcaDIM, AMBITterritorial join(BIBLIOTECA@DATA_PERIODE == AMBITterritorial@DATA_PERIODE",
						"     && DMterDIMcomarca@ID_AMBIT_TERRITORIAL == AMBITterritorial@ID_AMBIT_TERRITORIAL,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LJamb",
						"dcFLAGinterINTRA select(mapColumn(",
						"          CODI_BIBLIOTECA = BIBLIOTECA@CODI_BIBLIOTECA,",
						"          DATA_PERIODE = BIBLIOTECA@DATA_PERIODE,",
						"          CODI_INDICADOR = BIBLIOTECA@ID_INDICADOR,",
						"          FLAG_INTER_INTRA,",
						"          IND_VALOR_BIB = VALOR_BIB,",
						"          IND_VALOR_DIS = VALOR_DIS,",
						"          IND_VALOR_MUN = VALOR_MUN,",
						"          IND_VALOR_COM = VALOR_COM,",
						"          IND_VALOR_AMB = VALOR_AMB,",
						"          IND_VALOR_NAN = VALOR_NAN,",
						"          DESC_TRAM_POBLACIO,",
						"          DATA_CARREGA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCOLUMNAS",
						"ijDESCtramPOBLACIO derive(FLAG_INTER_INTRA = iif($P_FLAG_INTER == 1, 'Interanual', 'Intraanual'),",
						"          DATA_CARREGA = currentDate()) ~> dcFLAGinterINTRA",
						"fltINDICADORnumerador derive(FLAG_NUM_DEM = 'NUMERADOR') ~> dcINDICADORnumerador",
						"fltINDICADORdenominador derive(FLAG_NUM_DEM = 'DENOMINADOR') ~> dcINDICADORdenominador",
						"aggVALORnacional filter(FLAG_NUM_DEM == 'NUMERADOR') ~> sNACIONALnum",
						"aggVALORnacional filter(FLAG_NUM_DEM == 'DENOMINADOR') ~> sNACIONALden",
						"aggVALORbib filter(FLAG_NUM_DEM == 'NUMERADOR') ~> sBIBnum",
						"aggVALORbib filter(FLAG_NUM_DEM == 'DENOMINADOR') ~> sBIBden",
						"aggVALORmuni filter(FLAG_NUM_DEM == 'NUMERADOR') ~> sMUNInum",
						"aggVALORmuni filter(FLAG_NUM_DEM == 'DENOMINADOR') ~> sMUNIden",
						"aggVALORdist filter(FLAG_NUM_DEM == 'NUMERADOR') ~> sDISTnum",
						"aggVALORdist filter(FLAG_NUM_DEM == 'DENOMINADOR') ~> sDISTden",
						"aggVALORcomarca filter(FLAG_NUM_DEM == 'NUMERADOR') ~> sCOMARCAnum",
						"aggVALORcomarca filter(FLAG_NUM_DEM == 'DENOMINADOR') ~> sCOMARCAden",
						"aggVALORambit filter(FLAG_NUM_DEM == 'NUMERADOR') ~> sAMBITnum",
						"aggVALORambit filter(FLAG_NUM_DEM == 'DENOMINADOR') ~> sAMBITden",
						"sNACIONALden select(mapColumn(",
						"          FLAG_NUM_DEM_den = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den = DATA_PERIODE,",
						"          VALOR_den = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NACIONALden",
						"sBIBden select(mapColumn(",
						"          CODI_BIBLIOTECA_den = CODI_BIBLIOTECA,",
						"          FLAG_NUM_DEM_den = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den = DATA_PERIODE,",
						"          VALOR_den = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BIBden",
						"sMUNIden select(mapColumn(",
						"          INE_MUNICIPI_den = INE_MUNICIPI,",
						"          FLAG_NUM_DEM_den = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den = DATA_PERIODE,",
						"          VALOR_den = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MUNIden",
						"sDISTden select(mapColumn(",
						"          ID_DISTRICTE_den = ID_DISTRICTE,",
						"          FLAG_NUM_DEM_den = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den = DATA_PERIODE,",
						"          VALOR_den = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DISTden",
						"sCOMARCAden select(mapColumn(",
						"          INE_COMARCA_den = INE_COMARCA,",
						"          FLAG_NUM_DEM_den = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den = DATA_PERIODE,",
						"          VALOR_den = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> COMARCAden",
						"sAMBITden select(mapColumn(",
						"          ID_AMBIT_TERRITORIAL_den = ID_AMBIT_TERRITORIAL,",
						"          FLAG_NUM_DEM_den = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den = DATA_PERIODE,",
						"          VALOR_den = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AMBITden",
						"LJnan, DMbegDIMbiblioteques join(BIBLIOTECA@CODI_BIBLIOTECA == DMbegDIMbiblioteques@CODI_BIBLIOTECA,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IJbibliotequesDIM",
						"LJdis, DMterDIMmunicipi join(DMbegDIMbiblioteques@INE_MUNICIPI == DMterDIMmunicipi@INE_MUNICIPI,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IJmunicipiDIM",
						"LJcom, DMterDIMcomarca join(DMterDIMmunicipi@INE_COMARCA == DMterDIMcomarca@INE_COMARCA,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> IJcomarcaDIM",
						"dcPERIODE filter(CODI_INDICADOR == 'IND_6_4') ~> fltPOBLACION",
						"fltPOBLACION aggregate(groupBy(CODI_BIBLIOTECA,",
						"          DATA_PERIODE),",
						"     VALOR_POBLACIO = sum(IND_VALOR)) ~> aggPOBLACION",
						"aggPOBLACION derive(DESC_TRAM_POBLACIO = iif(VALOR_POBLACIO < 3000, \"Menys de 3.000 hab.\",\r",
						"    iif(VALOR_POBLACIO >= 3000 && VALOR_POBLACIO < 5000, \"3.000-5.000 hab.\",\r",
						"        iif(VALOR_POBLACIO >= 5000 && VALOR_POBLACIO < 10000, \"5.000-10.000 hab.\",\r",
						"            iif(VALOR_POBLACIO >= 10000 && VALOR_POBLACIO < 20000, \"10.000-20.000 hab.\",\r",
						"                iif(VALOR_POBLACIO >= 20000 && VALOR_POBLACIO < 30000, \"20.000-30.000 hab.\",\r",
						"                    iif(VALOR_POBLACIO >= 30000 && VALOR_POBLACIO < 50000, \"30.000-50.000 hab.\",\r",
						"                        iif(VALOR_POBLACIO >= 50000 && VALOR_POBLACIO < 100000, \"50.000-100.000 hab.\",\r",
						"                            iif(VALOR_POBLACIO >= 100000 && VALOR_POBLACIO < 200000, \"100.000-200.000 hab.\",\r",
						"                                iif(VALOR_POBLACIO >= 100000 && VALOR_POBLACIO < 200000, \"Més de 200.000 hab.\",\r",
						"                                     \"ND\"\r",
						"                                )\r",
						"                            )\r",
						"                        )\r",
						"                    )\r",
						"                )\r",
						"            )\r",
						"        )\r",
						"    )\r",
						")) ~> dcDESCtramPOBLACIO",
						"LJamb, dcDESCtramPOBLACIO join(BIBLIOTECA@CODI_BIBLIOTECA == aggPOBLACION@CODI_BIBLIOTECA",
						"     && BIBLIOTECA@DATA_PERIODE == aggPOBLACION@DATA_PERIODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ijDESCtramPOBLACIO",
						"selectCOLUMNAS alterRow(upsertIf(1==1)) ~> AlterRow1",
						"dcPERIODE filter(contains($P_IND_ORIGEN_DENOMINADOR2, #item == CODI_INDICADOR)) ~> fltINDICADORdenominador2",
						"fltINDICADORdenominador2 derive(FLAG_NUM_DEM = 'DENOMINADOR2') ~> dcINDICADORdenominador2",
						"dcINDICADORdenominador2 select(mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          FLAG_NUM_DEM,",
						"          IND_VALOR,",
						"          DATA_PERIODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> den2BIBLIOTECA",
						"numBIBLIOTECA, den2BIBLIOTECA union(byName: true)~> unionDEN2bibliotecas",
						"aggVALORnacional filter(FLAG_NUM_DEM == 'DENOMINADOR2') ~> sNACIONALden2",
						"sNACIONALden2 select(mapColumn(",
						"          FLAG_NUM_DEM_den2 = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den2 = DATA_PERIODE,",
						"          VALOR_den2 = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> NACIONALden2",
						"joinNUMERAdenominaNACIONAL, NACIONALden2 join(DATA_PERIODE == DATA_PERIODE_den2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenomina2NACIONAL",
						"aggVALORcomarca filter(FLAG_NUM_DEM == 'DENOMINADOR2') ~> sCOMARCAden2",
						"sCOMARCAden2 select(mapColumn(",
						"          INE_COMARCA_den2 = INE_COMARCA,",
						"          FLAG_NUM_DEM_den2 = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den2 = DATA_PERIODE,",
						"          VALOR_den2 = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> COMARCAden2",
						"joinNUMERAdenominaCOMARCA, COMARCAden2 join(INE_COMARCA == INE_COMARCA_den2",
						"     && DATA_PERIODE == DATA_PERIODE_den2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenomina2COMARCA",
						"aggVALORambit filter(FLAG_NUM_DEM == 'DENOMINADOR2') ~> sAMBITden2",
						"sAMBITden2 select(mapColumn(",
						"          ID_AMBIT_TERRITORIAL_den2 = ID_AMBIT_TERRITORIAL,",
						"          FLAG_NUM_DEM_den2 = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den2 = DATA_PERIODE,",
						"          VALOR_den2 = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AMBITden2",
						"joinNUMERAdenominaAMBIT, AMBITden2 join(ID_AMBIT_TERRITORIAL == ID_AMBIT_TERRITORIAL_den2",
						"     && DATA_PERIODE == DATA_PERIODE_den2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaAMBIT2",
						"aggVALORmuni filter(FLAG_NUM_DEM == 'DENOMINADOR2') ~> sMUNIden2",
						"sMUNIden2 select(mapColumn(",
						"          INE_MUNICIPI_den2 = INE_MUNICIPI,",
						"          FLAG_NUM_DEM_den2 = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den2 = DATA_PERIODE,",
						"          VALOR_den2 = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MUNIden2",
						"joinNUMERAdenominaMUNI, MUNIden2 join(INE_MUNICIPI == INE_MUNICIPI_den2",
						"     && DATA_PERIODE == DATA_PERIODE_den2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaMUNI2",
						"aggVALORdist filter(FLAG_NUM_DEM == 'DENOMINADOR2') ~> sDISTden2",
						"sDISTden2 select(mapColumn(",
						"          ID_DISTRICTE_den2 = ID_DISTRICTE,",
						"          FLAG_NUM_DEM_den2 = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den2 = DATA_PERIODE,",
						"          VALOR_den2 = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DISTden2",
						"joinNUMERAdenominaDIST, DISTden2 join(ID_DISTRICTE == ID_DISTRICTE_den2",
						"     && DATA_PERIODE == DATA_PERIODE_den2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaDIST2",
						"aggVALORbib filter(FLAG_NUM_DEM == 'DENOMINADOR2') ~> sBIBnum2",
						"sBIBnum2 select(mapColumn(",
						"          CODI_BIBLIOTECA_den2 = CODI_BIBLIOTECA,",
						"          FLAG_NUM_DEM_den2 = FLAG_NUM_DEM,",
						"          DATA_PERIODE_den2 = DATA_PERIODE,",
						"          VALOR_den2 = VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> BIBden2",
						"joinNUMERAdenominaBIB, BIBden2 join(CODI_BIBLIOTECA == CODI_BIBLIOTECA_den2",
						"     && DATA_PERIODE == DATA_PERIODE_den2,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinNUMERAdenominaBIB2",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CODI_BIBLIOTECA as string,",
						"          DATA_PERIODE as date,",
						"          CODI_INDICADOR as string,",
						"          FLAG_INTER_INTRA as string,",
						"          IND_VALOR_BIB as float,",
						"          IND_VALOR_DIS as float,",
						"          IND_VALOR_MUN as float,",
						"          IND_VALOR_COM as float,",
						"          IND_VALOR_AMB as float,",
						"          IND_VALOR_NAN as float,",
						"          DESC_TRAM_POBLACIO as string,",
						"          DATA_CARREGA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_BIBLIOTECA','DATA_PERIODE','CODI_INDICADOR','FLAG_INTER_INTRA'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMbegFACTindicadors2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_BEG_ODS4_BAIXES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS3_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "ODS3FactIndicadors"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DimBiblioteques"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "ODSFactIndicadors"
						}
					],
					"transformations": [
						{
							"name": "SoloCodiBiblioteca"
						},
						{
							"name": "Datas"
						},
						{
							"name": "Select"
						},
						{
							"name": "join"
						}
					],
					"script": "parameters{\n\tData_Carrega as string\n}\nsource(output(\n\t\tCODI_BIBLIOTECA as string,\n\t\tCODI_INDICADOR as string,\n\t\tIND_VALOR as integer,\n\t\tDATA_INSERCIO as date,\n\t\tDATA_PERIODE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODS3FactIndicadors\nsource(output(\n\t\tID_BIBLIOTECA as integer,\n\t\tID_AGENCY as integer,\n\t\tID_USUARI as integer,\n\t\tCODI_BIBLIOTECA as string,\n\t\tID_TIPUS as integer,\n\t\tID_MODUL as integer,\n\t\tCODI_NIDEN as string,\n\t\tID_ESTAT as integer,\n\t\tDESC_BIBLIOTECA as string,\n\t\tDATA_ALTA_BIBLIO as timestamp,\n\t\tDATA_BAIXA_BIBLIO as timestamp,\n\t\tID_TIPUS_VIA as integer,\n\t\tDESC_VIA as string,\n\t\tNUM_VIA as string,\n\t\tINE_MUNICIPI as string,\n\t\tID_DISTRICTE as integer,\n\t\tCP as string,\n\t\tUTMX as double,\n\t\tUTMY as double,\n\t\tNUM_LONGITUD as double,\n\t\tNUM_LATITUD as double,\n\t\tNUM_TELEFON as string,\n\t\tNUM_EXTENSIO as string,\n\t\tNUM_FAX as string,\n\t\tDESC_EMAIL as string,\n\t\tDESC_WEB as string,\n\t\tFLAG_BEG as boolean,\n\t\tFLAG_SLPC as boolean,\n\t\tID_MAPA as integer,\n\t\tID_CATEGORIA as integer,\n\t\tID_TITULARITAT as integer,\n\t\tID_FORMA_ACCES as integer,\n\t\tES_CATALEG_COLECTIU_CCLP as boolean,\n\t\tWEB_CATALEG_COLECTIU_CCLP as string,\n\t\tES_CATALEG_COLECTIU_DIP_BCN as boolean,\n\t\tWEB_CATALEG_COLECTIU_DIP_BCN as string,\n\t\tES_CATALEG_COLECTIU_CCUC as boolean,\n\t\tWEB_CATALEG_COLECTIU_CCUC as string,\n\t\tES_CATALEG_COLECTIU_BEG as boolean,\n\t\tWEB_CATALEG_COLECTIU_BEG as string,\n\t\tES_CATALEG_COLECTIU_ALTRES as boolean,\n\t\tWEB_CATALEG_COLECTIU_ALTRES as string,\n\t\tID_DIRECTOR_TRACTAMENT as integer,\n\t\tDESC_DIRECTOR_NOMB as string,\n\t\tDESC_DIRECTOR_PRIMER_COGNOM as string,\n\t\tDESC_DIRECTOR_SEGON_COGNOM as string,\n\t\tFLAG_ADAPTADA as boolean,\n\t\tDESC_OBSERVACIONS as string,\n\t\tOBS_ITINERARIS as string,\n\t\tDATA_ALTA as timestamp,\n\t\tID_USUARI_ALTA as integer,\n\t\tDATA_MODIF as timestamp,\n\t\tID_USUARI_MODIF as integer,\n\t\tDATA_BAIXA as timestamp,\n\t\tID_USUARI_BAIXA as integer,\n\t\tID_ADSCRIPCIO as integer,\n\t\tID_CATEGORIA_ESP as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DimBiblioteques\nDimBiblioteques select(mapColumn(\n\t\tCODI_BIBLIOTECA,\n\t\tID_AGENCY\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SoloCodiBiblioteca\njoin derive(DATA_INSERCIO = currentDate(),\n\t\tDATA_PERIODE = toDate(concat($Data_Carrega,'01'),'yyyyMMdd')) ~> Datas\nDatas select(mapColumn(\n\t\tID_AGENCY,\n\t\tCODI_BIBLIOTECA = SoloCodiBiblioteca@CODI_BIBLIOTECA,\n\t\tCODI_INDICADOR,\n\t\tIND_VALOR,\n\t\tDATA_INSERCIO,\n\t\tDATA_PERIODE\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSoloCodiBiblioteca, ODS3FactIndicadors join(SoloCodiBiblioteca@CODI_BIBLIOTECA == ODS3FactIndicadors@CODI_BIBLIOTECA,\n\tjoinType:'inner',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> join\nSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_AGENCY as string,\n\t\tCODI_BIBLIOTECA as string,\n\t\tCODI_INDICADOR as string,\n\t\tIND_VALOR as decimal(17,6),\n\t\tDATA_INSERCIO as date,\n\t\tDATA_PERIODE as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> ODSFactIndicadors"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CARREGA_DATA_ENTRY')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_DATA_ENTRY",
								"type": "DatasetReference"
							},
							"name": "DataEntry"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DMDimBiblioteques"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMFactIndicadors"
						}
					],
					"transformations": [
						{
							"name": "Unpivot"
						},
						{
							"name": "FiltroDespeses"
						},
						{
							"name": "DataInsercio"
						},
						{
							"name": "Join"
						},
						{
							"name": "SelectAgency"
						},
						{
							"name": "Select"
						},
						{
							"name": "FiltroPeriode"
						},
						{
							"name": "CalculoIndicadors"
						},
						{
							"name": "CalculoIndicadors2"
						},
						{
							"name": "CalculoIndicadors3"
						},
						{
							"name": "CalculoIndicadors4"
						},
						{
							"name": "CalculoIndicadors5"
						},
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Data_Carrega as string",
						"}",
						"source(output(",
						"          CODI_BIBLIOTECA as string,",
						"          DATA_PERIODE as date,",
						"          IND_1_4 as double,",
						"          IND_2_1111 as double,",
						"          IND_2_1113 as double,",
						"          IND_2_1122 as double,",
						"          IND_2_113 as double,",
						"          IND_2_114 as double,",
						"          IND_2_115 as double,",
						"          IND_2_121 as double,",
						"          IND_2_122 as double,",
						"          IND_2_123 as double,",
						"          IND_2_2111 as double,",
						"          IND_2_2113 as double,",
						"          IND_2_2122 as double,",
						"          IND_2_213 as double,",
						"          IND_2_214 as double,",
						"          IND_2_215 as double,",
						"          IND_2_221 as double,",
						"          IND_2_222 as double,",
						"          IND_2_223 as double,",
						"          IND_2_4111 as double,",
						"          IND_2_4113 as double,",
						"          IND_2_4122 as double,",
						"          IND_2_413 as double,",
						"          IND_2_414 as double,",
						"          IND_2_415 as double,",
						"          IND_2_421 as double,",
						"          IND_2_422 as double,",
						"          IND_2_423 as double,",
						"          IND_2_5111 as double,",
						"          IND_2_5113 as double,",
						"          IND_2_5122 as double,",
						"          IND_2_513 as double,",
						"          IND_2_514 as double,",
						"          IND_2_515 as double,",
						"          IND_2_521 as double,",
						"          IND_2_522 as double,",
						"          IND_2_523 as double,",
						"          IND_2_71 as double,",
						"          IND_2_72 as double,",
						"          IND_2_73 as double,",
						"          IND_2_74 as double,",
						"          IND_4_111 as double,",
						"          IND_4_112 as double,",
						"          IND_4_122 as double,",
						"          IND_4_123 as double,",
						"          IND_4_21 as double,",
						"          IND_4_22 as double,",
						"          IND_4_31 as double,",
						"          IND_4_32 as double,",
						"          IND_5_1 as double,",
						"          IND_5_2 as double,",
						"          IND_5_3 as double,",
						"          IND_5_41 as double,",
						"          IND_5_42 as double,",
						"          IND_5_5 as double,",
						"          IND_5_6 as double,",
						"          IND_5_7 as double,",
						"          IND_5_8 as double,",
						"          IND_5_9 as double,",
						"          IND_6_4 as double,",
						"          IND_8_1311 as double,",
						"          IND_8_1312 as double,",
						"          IND_8_132 as double,",
						"          IND_8_1411 as double,",
						"          IND_8_1412 as double,",
						"          IND_8_142 as double,",
						"          IND_8_1511 as double,",
						"          IND_8_1512 as double,",
						"          IND_8_152 as double,",
						"          IND_8_2311 as double,",
						"          IND_8_2312 as double,",
						"          IND_8_232 as double,",
						"          IND_8_2411 as double,",
						"          IND_8_2412 as double,",
						"          IND_8_242 as double,",
						"          IND_8_2511 as double,",
						"          IND_8_2512 as double,",
						"          IND_8_252 as double,",
						"          IND_8_311 as double,",
						"          IND_8_312 as double,",
						"          IND_8_313 as double,",
						"          IND_8_321 as double,",
						"          IND_8_322 as double,",
						"          IND_8_323 as double,",
						"          IND_9_2 as double,",
						"          IND_9_011 as double,",
						"          IND_9_012 as double,",
						"          IND_9_013 as double,",
						"          IND_9_015 as double,",
						"          IND_9_016 as double,",
						"          IND_9_020 as double,",
						"          IND_9_0223 as double,",
						"          IND_9_0231 as double,",
						"          IND_9_0232 as double,",
						"          IND_9_0233 as double,",
						"          IND_9_02411 as double,",
						"          IND_9_02412 as double,",
						"          IND_9_02413 as double,",
						"          IND_9_02421 as double,",
						"          IND_9_02422 as double,",
						"          IND_9_02423 as double,",
						"          IND_9_025 as double,",
						"          IND_9_026 as double,",
						"          IND_10_11 as double,",
						"          IND_10_13 as double,",
						"          IND_10_14 as double,",
						"          IND_10_15 as double,",
						"          IND_10_1613 as double,",
						"          IND_10_1614 as double,",
						"          IND_10_1615 as double,",
						"          IND_10_162 as double,",
						"          IND_10_17 as double,",
						"          IND_10_18 as double,",
						"          IND_10_21 as double,",
						"          IND_10_24 as double,",
						"          IND_10_25 as double,",
						"          IND_10_2612 as double,",
						"          IND_10_2613 as double,",
						"          IND_10_2614 as double,",
						"          IND_10_2615 as double,",
						"          IND_10_262 as double,",
						"          IND_10_27 as double,",
						"          IND_10_28 as double,",
						"          IND_11_11 as double,",
						"          IND_11_12 as double,",
						"          IND_11_13 as double,",
						"          IND_11_14 as double,",
						"          IND_11_15 as double,",
						"          IND_11_51 as double,",
						"          IND_11_52 as double,",
						"          IND_11_53 as double,",
						"          IND_11_54 as double,",
						"          IND_11_55 as double,",
						"          IND_16_1 as double,",
						"          IND_16_2 as double,",
						"          IND_16_3 as double,",
						"          IND_16_51 as double,",
						"          IND_16_52 as double,",
						"          IND_16_53 as double,",
						"          IND_16_54 as double,",
						"          IND_16_61 as double,",
						"          IND_16_62 as double,",
						"          IND_16_63 as double,",
						"          IND_16_64 as double,",
						"          IND_16_7 as double,",
						"          IND_16_8 as double,",
						"          IND_17_1 as double,",
						"          IND_17_2 as double,",
						"          IND_17_3 as double,",
						"          IND_19_1 as double,",
						"          IND_19_2 as double,",
						"          IND_19_3 as double,",
						"          IND_19_4 as double,",
						"          IND_19_5 as double,",
						"          IND_20_1 as double,",
						"          IND_20_2 as double,",
						"          IND_20_3 as double,",
						"          IND_20_4 as double,",
						"          IND_20_5 as double,",
						"          IND_21_1 as double,",
						"          IND_21_2 as double,",
						"          IND_21_3 as double,",
						"          IND_21_4 as double,",
						"          IND_5_10 as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataEntry",
						"source(output(",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_NIDEN as string,",
						"          ESTAT as string,",
						"          TIPUS as string,",
						"          CATEGORIA_ESPECIALITZADA as string,",
						"          DESC_BIBLIOTECA as string,",
						"          ID_AGENCY as string,",
						"          TERMINAL as string,",
						"          DATA_ALTA as string,",
						"          DATA_BAIXA as string,",
						"          ADAPTADA as string,",
						"          FORMA_ACCESS as string,",
						"          TITULARITAT as string,",
						"          {ADREÇA} as string,",
						"          MUNICIPI as string,",
						"          {C.P.} as string,",
						"          COMARCA as string,",
						"          {ÀMBIT TERRITORIAL} as string,",
						"          SSTT as string,",
						"          PROVINCIA as string,",
						"          UTMX as string,",
						"          UTMY as string,",
						"          {MÒDUL_TERRITORIAL} as string,",
						"          {TELÈFON} as string,",
						"          EXT as string,",
						"          FAX as string,",
						"          WEB as string,",
						"          {ADREÇA_ELCT} as string,",
						"          {ADREÇA_ELECT_2} as string,",
						"          TRACTAMENT_DIRECT as string,",
						"          NOM_DIRECT as string,",
						"          PRIMER_COGNOM as string,",
						"          SEGON_COGNOM as string,",
						"          OBSERVACIONS as string,",
						"          GRUP as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMDimBiblioteques",
						"CalculoIndicadors5 unpivot(output(",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as double",
						"     ),",
						"     ungroupBy(CODI_BIBLIOTECA,",
						"          DATA_PERIODE),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> Unpivot",
						"Unpivot filter(not(month(DATA_PERIODE) != 12 && in(['IND_11_11',",
						"'IND_11_12',",
						"'IND_11_13',",
						"'IND_11_14',",
						"'IND_11_15',",
						"'IND_11_51',",
						"'IND_11_52',",
						"'IND_11_53',",
						"'IND_11_54',",
						"'IND_11_55'],CODI_INDICADOR)",
						")) ~> FiltroDespeses",
						"FiltroDespeses derive(DATA_INSERCIO = currentDate()) ~> DataInsercio",
						"DataInsercio, SelectAgency join(Unpivot@CODI_BIBLIOTECA == SelectAgency@CODI_BIBLIOTECA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join",
						"DMDimBiblioteques select(mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          ID_AGENCY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAgency",
						"Join select(mapColumn(",
						"          ID_AGENCY,",
						"          CODI_BIBLIOTECA = Unpivot@CODI_BIBLIOTECA,",
						"          CODI_INDICADOR,",
						"          IND_VALOR,",
						"          DATA_INSERCIO,",
						"          DATA_PERIODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select",
						"DataEntry filter(toDate(concat($Data_Carrega,'01'),'yyyyMMdd') == DATA_PERIODE) ~> FiltroPeriode",
						"FiltroPeriode derive(IND_2_111 = IND_2_1111+IND_2_1113,",
						"          IND_2_12 = IND_2_121+IND_2_122+IND_2_123,",
						"          IND_2_211 = IND_2_2111+IND_2_2113,",
						"          IND_2_22 = IND_2_221+IND_2_222+IND_2_223,",
						"          IND_2_3111 = IND_2_2111+IND_2_1111,",
						"          IND_2_3113 = IND_2_2113+IND_2_1113,",
						"          IND_2_3122 = IND_2_2122+IND_2_1122,",
						"          IND_2_313 = IND_2_213+IND_2_113,",
						"          IND_2_314 = IND_2_214+IND_2_114,",
						"          IND_2_315 = IND_2_215+IND_2_115,",
						"          IND_2_321 = IND_2_221+IND_2_121,",
						"          IND_2_322 = IND_2_222+IND_2_122,",
						"          IND_2_323 = IND_2_223+IND_2_123,",
						"          IND_2_411 = IND_2_4111+IND_2_4113,",
						"          IND_2_42 = IND_2_421+IND_2_422+IND_2_423,",
						"          IND_2_511 = IND_2_5111+IND_2_5113,",
						"          IND_2_52 = IND_2_521+IND_2_522+IND_2_523,",
						"          IND_2_6111 = IND_2_5111+IND_2_4111,",
						"          IND_2_6113 = IND_2_5113+IND_2_4113,",
						"          IND_2_6122 = IND_2_5122+IND_2_4122,",
						"          IND_2_613 = IND_2_513+IND_2_413,",
						"          IND_2_614 = IND_2_514+IND_2_414,",
						"          IND_2_615 = IND_2_515+IND_2_415,",
						"          IND_2_621 = IND_2_521+IND_2_421,",
						"          IND_2_622 = IND_2_522+IND_2_422,",
						"          IND_2_623 = IND_2_523+IND_2_423,",
						"          IND_4_11 = IND_4_111+IND_4_112,",
						"          IND_4_12 = IND_4_122+IND_4_123,",
						"          IND_4_13 = IND_4_111+IND_4_122,",
						"          IND_4_14 = IND_4_112+IND_4_123,",
						"          IND_4_2 = IND_4_21+IND_4_22,",
						"          IND_4_3 = IND_4_31+IND_4_32,",
						"          IND_5_4 = IND_5_41+IND_5_42,",
						"          IND_8_131 = IND_8_1311+IND_8_1312,",
						"          IND_8_111 = IND_8_1311+IND_8_1411+IND_8_1511,",
						"          IND_8_112 = IND_8_1312+IND_8_1412+IND_8_1512,",
						"          IND_8_141 = IND_8_1411+IND_8_1412,",
						"          IND_8_151 = IND_8_1511+IND_8_1512,",
						"          IND_8_241 = IND_8_2411+IND_8_2412,",
						"          IND_8_251 = IND_8_2511+IND_8_2512,",
						"          IND_8_31 = IND_8_311+IND_8_312+IND_8_313,",
						"          IND_8_32 = IND_8_321+IND_8_322+IND_8_323,",
						"          IND_8_211 = IND_8_2311+IND_8_2411+IND_8_2511,",
						"          IND_8_212 = IND_8_2312+IND_8_2412+IND_8_2512,",
						"          IND_8_231 = IND_8_2311+IND_8_2312,",
						"          IND_8_22 = IND_8_232+IND_8_242+IND_8_252,",
						"          IND_9_023 = IND_9_0231+IND_9_0232+IND_9_0233,",
						"          IND_9_0241 = IND_9_02411+IND_9_02412+IND_9_02413,",
						"          IND_9_0242 = IND_9_02421+IND_9_02422+IND_9_02423,",
						"          IND_9_1 = IND_9_2+IND_10_21,",
						"          IND_10_161 = IND_10_1613+IND_10_1614+IND_10_1615,",
						"          IND_10_261 = IND_10_2612+IND_10_2613+IND_10_2614+IND_10_2615,",
						"          IND_11_1 = IND_11_11+IND_11_12+IND_11_13+IND_11_14+IND_11_15,",
						"          IND_11_5 = IND_11_51+IND_11_52+IND_11_53+IND_11_54+IND_11_55,",
						"          IND_16_5 = IND_16_51+IND_16_52+IND_16_53+IND_16_54,",
						"          IND_16_6 = IND_16_61+IND_16_62+IND_16_63+IND_16_64,",
						"          IND_19 = IND_19_1+IND_19_2+IND_19_3+IND_19_4+IND_19_5,",
						"          IND_20 = IND_20_1+IND_20_2+IND_20_3+IND_20_4+IND_20_5,",
						"          IND_21 = IND_21_1+IND_21_2+IND_21_3+IND_21_4) ~> CalculoIndicadors",
						"CalculoIndicadors derive(IND_2_11 = IND_2_111+IND_2_113+IND_2_114+IND_2_115,",
						"          IND_2_21 = IND_2_211+IND_2_213+IND_2_214+IND_2_215,",
						"          IND_2_311 = IND_2_211+IND_2_111,",
						"          IND_2_32 = IND_2_22+IND_2_12,",
						"          IND_2_41 = IND_2_411+IND_2_413+IND_2_414+IND_2_415,",
						"          IND_2_511 = IND_2_5111+IND_2_5113,",
						"          IND_2_611 = IND_2_511+IND_2_411,",
						"          IND_2_62 = IND_2_52+IND_2_42,",
						"          IND_4_1 = IND_4_11+IND_4_12,",
						"          IND_4_12 = IND_4_122+IND_4_123,",
						"          IND_4_1b = IND_4_13+IND_4_14,",
						"          IND_8_11 = IND_8_111+IND_8_112,",
						"          IND_8_12 = IND_8_132+IND_8_142+IND_8_152,",
						"          IND_8_13 = IND_8_131+IND_8_132,",
						"          IND_8_14 = IND_8_141+IND_8_142,",
						"          IND_8_15 = IND_8_151+IND_8_152,",
						"          IND_8_21 = IND_8_211+IND_8_212,",
						"          IND_8_23 = IND_8_231+IND_8_232,",
						"          IND_8_24 = IND_8_241+IND_8_242,",
						"          IND_8_25 = IND_8_251+IND_8_252,",
						"          IND_9_024 = IND_9_0241+IND_9_0242,",
						"          IND_10_16 = IND_10_161+IND_10_162,",
						"          IND_10_26 = IND_10_261+IND_10_262,",
						"          IND_11 = IND_11_1+IND_11_5) ~> CalculoIndicadors2",
						"CalculoIndicadors2 derive(IND_2_1 = IND_2_11+IND_2_12,",
						"          IND_2_2 = IND_2_21+IND_2_22,",
						"          IND_2_31 = IND_2_21+IND_2_11,",
						"          IND_2_4 = IND_2_41+IND_2_42,",
						"          IND_2_51 = IND_2_511+IND_2_513+IND_2_514+IND_2_515,",
						"          IND_8_1 = IND_8_11+IND_8_12,",
						"          IND_8_2 = IND_8_21+IND_8_22,",
						"          IND_10_2 = IND_10_21+IND_10_24+IND_10_25+IND_10_26+IND_10_27+IND_10_28,",
						"          IND_10_1 = IND_10_11+IND_10_13+IND_10_14+IND_10_15+IND_10_16+IND_10_17+IND_10_18) ~> CalculoIndicadors3",
						"CalculoIndicadors3 derive(IND_2_3 = IND_2_2+IND_2_1,",
						"          IND_2_5 = IND_2_51+IND_2_52,",
						"          IND_2_61 = IND_2_51+IND_2_41) ~> CalculoIndicadors4",
						"CalculoIndicadors4 derive(IND_2_6 = IND_2_5+IND_2_4) ~> CalculoIndicadors5",
						"Select alterRow(upsertIf(1==1)) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as double,",
						"          DATA_PERIODE as date,",
						"          DATA_INSERCIO as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_BIBLIOTECA','CODI_INDICADOR','DATA_PERIODE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactIndicadors"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CARREGA_DATA_ENTRY_MES_VENCIDO')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_DATA_ENTRY",
								"type": "DatasetReference"
							},
							"name": "DataEntry"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DMDimBiblioteques"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_HIST_ENTRADA_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "HistEntradaIndicadors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMFactIndicadors"
						}
					],
					"transformations": [
						{
							"name": "Unpivot"
						},
						{
							"name": "FiltroDespeses"
						},
						{
							"name": "DataInsercio"
						},
						{
							"name": "Join"
						},
						{
							"name": "SelectAgency"
						},
						{
							"name": "Select"
						},
						{
							"name": "CalculoIndicadors"
						},
						{
							"name": "CalculoIndicadors2"
						},
						{
							"name": "CalculoIndicadors3"
						},
						{
							"name": "CalculoIndicadors4"
						},
						{
							"name": "CalculoIndicadors5"
						},
						{
							"name": "AlterRow"
						},
						{
							"name": "join1"
						},
						{
							"name": "ADate"
						},
						{
							"name": "select3"
						},
						{
							"name": "MaxModif"
						},
						{
							"name": "FiltroDataModificacio"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CODI_BIBLIOTECA as string,",
						"          DATA_PERIODE as date,",
						"          IND_1_4 as double,",
						"          IND_2_1111 as double,",
						"          IND_2_1113 as double,",
						"          IND_2_1122 as double,",
						"          IND_2_113 as double,",
						"          IND_2_114 as double,",
						"          IND_2_115 as double,",
						"          IND_2_121 as double,",
						"          IND_2_122 as double,",
						"          IND_2_123 as double,",
						"          IND_2_2111 as double,",
						"          IND_2_2113 as double,",
						"          IND_2_2122 as double,",
						"          IND_2_213 as double,",
						"          IND_2_214 as double,",
						"          IND_2_215 as double,",
						"          IND_2_221 as double,",
						"          IND_2_222 as double,",
						"          IND_2_223 as double,",
						"          IND_2_4111 as double,",
						"          IND_2_4113 as double,",
						"          IND_2_4122 as double,",
						"          IND_2_413 as double,",
						"          IND_2_414 as double,",
						"          IND_2_415 as double,",
						"          IND_2_421 as double,",
						"          IND_2_422 as double,",
						"          IND_2_423 as double,",
						"          IND_2_5111 as double,",
						"          IND_2_5113 as double,",
						"          IND_2_5122 as double,",
						"          IND_2_513 as double,",
						"          IND_2_514 as double,",
						"          IND_2_515 as double,",
						"          IND_2_521 as double,",
						"          IND_2_522 as double,",
						"          IND_2_523 as double,",
						"          IND_2_71 as double,",
						"          IND_2_72 as double,",
						"          IND_2_73 as double,",
						"          IND_2_74 as double,",
						"          IND_4_111 as double,",
						"          IND_4_112 as double,",
						"          IND_4_122 as double,",
						"          IND_4_123 as double,",
						"          IND_4_21 as double,",
						"          IND_4_22 as double,",
						"          IND_4_31 as double,",
						"          IND_4_32 as double,",
						"          IND_5_1 as double,",
						"          IND_5_2 as double,",
						"          IND_5_3 as double,",
						"          IND_5_41 as double,",
						"          IND_5_42 as double,",
						"          IND_5_5 as double,",
						"          IND_5_6 as double,",
						"          IND_5_7 as double,",
						"          IND_5_8 as double,",
						"          IND_5_9 as double,",
						"          IND_6_4 as double,",
						"          IND_8_1311 as double,",
						"          IND_8_1312 as double,",
						"          IND_8_132 as double,",
						"          IND_8_1411 as double,",
						"          IND_8_1412 as double,",
						"          IND_8_142 as double,",
						"          IND_8_1511 as double,",
						"          IND_8_1512 as double,",
						"          IND_8_152 as double,",
						"          IND_8_2311 as double,",
						"          IND_8_2312 as double,",
						"          IND_8_232 as double,",
						"          IND_8_2411 as double,",
						"          IND_8_2412 as double,",
						"          IND_8_242 as double,",
						"          IND_8_2511 as double,",
						"          IND_8_2512 as double,",
						"          IND_8_252 as double,",
						"          IND_8_311 as double,",
						"          IND_8_312 as double,",
						"          IND_8_313 as double,",
						"          IND_8_321 as double,",
						"          IND_8_322 as double,",
						"          IND_8_323 as double,",
						"          IND_9_2 as double,",
						"          IND_9_011 as double,",
						"          IND_9_012 as double,",
						"          IND_9_013 as double,",
						"          IND_9_015 as double,",
						"          IND_9_016 as double,",
						"          IND_9_020 as double,",
						"          IND_9_0223 as double,",
						"          IND_9_0231 as double,",
						"          IND_9_0232 as double,",
						"          IND_9_0233 as double,",
						"          IND_9_02411 as double,",
						"          IND_9_02412 as double,",
						"          IND_9_02413 as double,",
						"          IND_9_02421 as double,",
						"          IND_9_02422 as double,",
						"          IND_9_02423 as double,",
						"          IND_9_025 as double,",
						"          IND_9_026 as double,",
						"          IND_10_11 as double,",
						"          IND_10_13 as double,",
						"          IND_10_14 as double,",
						"          IND_10_15 as double,",
						"          IND_10_1613 as double,",
						"          IND_10_1614 as double,",
						"          IND_10_1615 as double,",
						"          IND_10_162 as double,",
						"          IND_10_17 as double,",
						"          IND_10_18 as double,",
						"          IND_10_21 as double,",
						"          IND_10_24 as double,",
						"          IND_10_25 as double,",
						"          IND_10_2612 as double,",
						"          IND_10_2613 as double,",
						"          IND_10_2614 as double,",
						"          IND_10_2615 as double,",
						"          IND_10_262 as double,",
						"          IND_10_27 as double,",
						"          IND_10_28 as double,",
						"          IND_11_11 as double,",
						"          IND_11_12 as double,",
						"          IND_11_13 as double,",
						"          IND_11_14 as double,",
						"          IND_11_15 as double,",
						"          IND_11_51 as double,",
						"          IND_11_52 as double,",
						"          IND_11_53 as double,",
						"          IND_11_54 as double,",
						"          IND_11_55 as double,",
						"          IND_16_1 as double,",
						"          IND_16_2 as double,",
						"          IND_16_3 as double,",
						"          IND_16_51 as double,",
						"          IND_16_52 as double,",
						"          IND_16_53 as double,",
						"          IND_16_54 as double,",
						"          IND_16_61 as double,",
						"          IND_16_62 as double,",
						"          IND_16_63 as double,",
						"          IND_16_64 as double,",
						"          IND_16_7 as double,",
						"          IND_16_8 as double,",
						"          IND_17_1 as double,",
						"          IND_17_2 as double,",
						"          IND_17_3 as double,",
						"          IND_19_1 as double,",
						"          IND_19_2 as double,",
						"          IND_19_3 as double,",
						"          IND_19_4 as double,",
						"          IND_19_5 as double,",
						"          IND_20_1 as double,",
						"          IND_20_2 as double,",
						"          IND_20_3 as double,",
						"          IND_20_4 as double,",
						"          IND_20_5 as double,",
						"          IND_21_1 as double,",
						"          IND_21_2 as double,",
						"          IND_21_3 as double,",
						"          IND_21_4 as double,",
						"          IND_5_10 as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DataEntry",
						"source(output(",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_NIDEN as string,",
						"          ESTAT as string,",
						"          TIPUS as string,",
						"          CATEGORIA_ESPECIALITZADA as string,",
						"          DESC_BIBLIOTECA as string,",
						"          ID_AGENCY as string,",
						"          TERMINAL as string,",
						"          DATA_ALTA as string,",
						"          DATA_BAIXA as string,",
						"          ADAPTADA as string,",
						"          FORMA_ACCESS as string,",
						"          TITULARITAT as string,",
						"          {ADREÇA} as string,",
						"          MUNICIPI as string,",
						"          {C.P.} as string,",
						"          COMARCA as string,",
						"          {ÀMBIT TERRITORIAL} as string,",
						"          SSTT as string,",
						"          PROVINCIA as string,",
						"          UTMX as string,",
						"          UTMY as string,",
						"          {MÒDUL_TERRITORIAL} as string,",
						"          {TELÈFON} as string,",
						"          EXT as string,",
						"          FAX as string,",
						"          WEB as string,",
						"          {ADREÇA_ELCT} as string,",
						"          {ADREÇA_ELECT_2} as string,",
						"          TRACTAMENT_DIRECT as string,",
						"          NOM_DIRECT as string,",
						"          PRIMER_COGNOM as string,",
						"          SEGON_COGNOM as string,",
						"          OBSERVACIONS as string,",
						"          GRUP as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMDimBiblioteques",
						"source(output(",
						"          CODI_BIBLIOTECA as string,",
						"          DATA_PERIODE as timestamp,",
						"          DATA_MODIFICACIO as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> HistEntradaIndicadors",
						"CalculoIndicadors5 unpivot(output(",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as double",
						"     ),",
						"     ungroupBy(CODI_BIBLIOTECA,",
						"          DATA_PERIODE),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> Unpivot",
						"Unpivot filter(not(month(DATA_PERIODE) != 12 && in(['IND_11_11',",
						"'IND_11_12',",
						"'IND_11_13',",
						"'IND_11_14',",
						"'IND_11_15',",
						"'IND_11_16',",
						"'IND_11_21',",
						"'IND_11_22',",
						"'IND_11_23',",
						"'IND_11_24',",
						"'IND_11_25',",
						"'IND_11_26',",
						"'IND_11_31',",
						"'IND_11_32',",
						"'IND_11_33',",
						"'IND_11_34',",
						"'IND_11_35',",
						"'IND_11_36',",
						"'IND_11_41',",
						"'IND_11_42',",
						"'IND_11_43',",
						"'IND_11_44',",
						"'IND_11_45',",
						"'IND_11_46',",
						"'IND_11_51',",
						"'IND_11_52',",
						"'IND_11_53',",
						"'IND_11_54',",
						"'IND_11_55',",
						"'IND_11_56'],CODI_INDICADOR)",
						")) ~> FiltroDespeses",
						"FiltroDespeses derive(DATA_INSERCIO = currentDate()) ~> DataInsercio",
						"DataInsercio, SelectAgency join(Unpivot@CODI_BIBLIOTECA == SelectAgency@CODI_BIBLIOTECA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join",
						"DMDimBiblioteques select(mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          ID_AGENCY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAgency",
						"Join select(mapColumn(",
						"          ID_AGENCY,",
						"          CODI_BIBLIOTECA = Unpivot@CODI_BIBLIOTECA,",
						"          CODI_INDICADOR,",
						"          IND_VALOR,",
						"          DATA_INSERCIO,",
						"          DATA_PERIODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select",
						"select3 derive(IND_2_111 = IND_2_1111+IND_2_1113,",
						"          IND_2_12 = IND_2_121+IND_2_122+IND_2_123,",
						"          IND_2_211 = IND_2_2111+IND_2_2113,",
						"          IND_2_22 = IND_2_221+IND_2_222+IND_2_223,",
						"          IND_2_3111 = IND_2_2111+IND_2_1111,",
						"          IND_2_3113 = IND_2_2113+IND_2_1113,",
						"          IND_2_3122 = IND_2_2122+IND_2_1122,",
						"          IND_2_313 = IND_2_213+IND_2_113,",
						"          IND_2_314 = IND_2_214+IND_2_114,",
						"          IND_2_315 = IND_2_215+IND_2_115,",
						"          IND_2_321 = IND_2_221+IND_2_121,",
						"          IND_2_322 = IND_2_222+IND_2_122,",
						"          IND_2_323 = IND_2_223+IND_2_123,",
						"          IND_2_411 = IND_2_4111+IND_2_4113,",
						"          IND_2_42 = IND_2_421+IND_2_422+IND_2_423,",
						"          IND_2_511 = IND_2_5111+IND_2_5113,",
						"          IND_2_52 = IND_2_521+IND_2_522+IND_2_523,",
						"          IND_2_6111 = IND_2_5111+IND_2_4111,",
						"          IND_2_6113 = IND_2_5113+IND_2_4113,",
						"          IND_2_6122 = IND_2_5122+IND_2_4122,",
						"          IND_2_613 = IND_2_513+IND_2_413,",
						"          IND_2_614 = IND_2_514+IND_2_414,",
						"          IND_2_615 = IND_2_515+IND_2_415,",
						"          IND_2_621 = IND_2_521+IND_2_421,",
						"          IND_2_622 = IND_2_522+IND_2_422,",
						"          IND_2_623 = IND_2_523+IND_2_423,",
						"          IND_4_11 = IND_4_111+IND_4_112,",
						"          IND_4_12 = IND_4_122+IND_4_123,",
						"          IND_4_13 = IND_4_111+IND_4_122,",
						"          IND_4_14 = IND_4_112+IND_4_123,",
						"          IND_4_2 = IND_4_21+IND_4_22,",
						"          IND_4_3 = IND_4_31+IND_4_32,",
						"          IND_5_4 = IND_5_41+IND_5_42,",
						"          IND_8_131 = IND_8_1311+IND_8_1312,",
						"          IND_8_111 = IND_8_1311+IND_8_1411+IND_8_1511,",
						"          IND_8_112 = IND_8_1312+IND_8_1412+IND_8_1512,",
						"          IND_8_141 = IND_8_1411+IND_8_1412,",
						"          IND_8_151 = IND_8_1511+IND_8_1512,",
						"          IND_8_241 = IND_8_2411+IND_8_2412,",
						"          IND_8_251 = IND_8_2511+IND_8_2512,",
						"          IND_8_31 = IND_8_311+IND_8_312+IND_8_313,",
						"          IND_8_32 = IND_8_321+IND_8_322+IND_8_323,",
						"          IND_8_211 = IND_8_2311+IND_8_2411+IND_8_2511,",
						"          IND_8_212 = IND_8_2312+IND_8_2412+IND_8_2512,",
						"          IND_8_231 = IND_8_2311+IND_8_2312,",
						"          IND_8_22 = IND_8_232+IND_8_242+IND_8_252,",
						"          IND_9_023 = IND_9_0231+IND_9_0232+IND_9_0233,",
						"          IND_9_0241 = IND_9_02411+IND_9_02412+IND_9_02413,",
						"          IND_9_0242 = IND_9_02421+IND_9_02422+IND_9_02423,",
						"          IND_9_1 = IND_9_2+IND_10_21,",
						"          IND_10_161 = IND_10_1613+IND_10_1614+IND_10_1615,",
						"          IND_10_261 = IND_10_2612+IND_10_2613+IND_10_2614+IND_10_2615,",
						"          IND_11_1 = IND_11_11+IND_11_12+IND_11_13+IND_11_14+IND_11_15,",
						"          IND_11_5 = IND_11_51+IND_11_52+IND_11_53+IND_11_54+IND_11_55,",
						"          IND_16_5 = IND_16_51+IND_16_52+IND_16_53+IND_16_54,",
						"          IND_16_6 = IND_16_61+IND_16_62+IND_16_63+IND_16_64,",
						"          IND_19 = IND_19_1+IND_19_2+IND_19_3+IND_19_4+IND_19_5,",
						"          IND_20 = IND_20_1+IND_20_2+IND_20_3+IND_20_4+IND_20_5,",
						"          IND_21 = IND_21_1+IND_21_2+IND_21_3+IND_21_4) ~> CalculoIndicadors",
						"CalculoIndicadors derive(IND_2_11 = IND_2_111+IND_2_113+IND_2_114+IND_2_115,",
						"          IND_2_21 = IND_2_211+IND_2_213+IND_2_214+IND_2_215,",
						"          IND_2_311 = IND_2_211+IND_2_111,",
						"          IND_2_32 = IND_2_22+IND_2_12,",
						"          IND_2_41 = IND_2_411+IND_2_413+IND_2_414+IND_2_415,",
						"          IND_2_511 = IND_2_5111+IND_2_5113,",
						"          IND_2_611 = IND_2_511+IND_2_411,",
						"          IND_2_62 = IND_2_52+IND_2_42,",
						"          IND_4_1 = IND_4_11+IND_4_12,",
						"          IND_4_12 = IND_4_122+IND_4_123,",
						"          IND_4_1b = IND_4_13+IND_4_14,",
						"          IND_8_11 = IND_8_111+IND_8_112,",
						"          IND_8_12 = IND_8_132+IND_8_142+IND_8_152,",
						"          IND_8_13 = IND_8_131+IND_8_132,",
						"          IND_8_14 = IND_8_141+IND_8_142,",
						"          IND_8_15 = IND_8_151+IND_8_152,",
						"          IND_8_21 = IND_8_211+IND_8_212,",
						"          IND_8_23 = IND_8_231+IND_8_232,",
						"          IND_8_24 = IND_8_241+IND_8_242,",
						"          IND_8_25 = IND_8_251+IND_8_252,",
						"          IND_9_024 = IND_9_0241+IND_9_0242,",
						"          IND_10_16 = IND_10_161+IND_10_162,",
						"          IND_10_26 = IND_10_261+IND_10_262,",
						"          IND_11 = IND_11_1+IND_11_5) ~> CalculoIndicadors2",
						"CalculoIndicadors2 derive(IND_2_1 = IND_2_11+IND_2_12,",
						"          IND_2_2 = IND_2_21+IND_2_22,",
						"          IND_2_31 = IND_2_21+IND_2_11,",
						"          IND_2_4 = IND_2_41+IND_2_42,",
						"          IND_2_51 = IND_2_511+IND_2_513+IND_2_514+IND_2_515,",
						"          IND_8_1 = IND_8_11+IND_8_12,",
						"          IND_8_2 = IND_8_21+IND_8_22,",
						"          IND_10_2 = IND_10_21+IND_10_24+IND_10_25+IND_10_26+IND_10_27+IND_10_28,",
						"          IND_10_1 = IND_10_11+IND_10_13+IND_10_14+IND_10_15+IND_10_16+IND_10_17+IND_10_18) ~> CalculoIndicadors3",
						"CalculoIndicadors3 derive(IND_2_3 = IND_2_2+IND_2_1,",
						"          IND_2_5 = IND_2_51+IND_2_52,",
						"          IND_2_61 = IND_2_51+IND_2_41) ~> CalculoIndicadors4",
						"CalculoIndicadors4 derive(IND_2_6 = IND_2_5+IND_2_4) ~> CalculoIndicadors5",
						"Select alterRow(upsertIf(true())) ~> AlterRow",
						"DataEntry, ADate join(DataEntry@CODI_BIBLIOTECA == MaxModif@CODI_BIBLIOTECA",
						"     && DataEntry@DATA_PERIODE == ADate@DATA_PERIODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"MaxModif derive(DATA_PERIODE = toDate(concat(toString(year(DATA_PERIODE)),'-',toString(month(DATA_PERIODE)),'-01'),'yyyy-MM-dd','ISO 8601')) ~> ADate",
						"join1 select(mapColumn(",
						"          CODI_BIBLIOTECA = DataEntry@CODI_BIBLIOTECA,",
						"          DATA_PERIODE = DataEntry@DATA_PERIODE,",
						"          IND_1_4,",
						"          IND_2_1111,",
						"          IND_2_1113,",
						"          IND_2_1122,",
						"          IND_2_113,",
						"          IND_2_114,",
						"          IND_2_115,",
						"          IND_2_121,",
						"          IND_2_122,",
						"          IND_2_123,",
						"          IND_2_2111,",
						"          IND_2_2113,",
						"          IND_2_2122,",
						"          IND_2_213,",
						"          IND_2_214,",
						"          IND_2_215,",
						"          IND_2_221,",
						"          IND_2_222,",
						"          IND_2_223,",
						"          IND_2_4111,",
						"          IND_2_4113,",
						"          IND_2_4122,",
						"          IND_2_413,",
						"          IND_2_414,",
						"          IND_2_415,",
						"          IND_2_421,",
						"          IND_2_422,",
						"          IND_2_423,",
						"          IND_2_5111,",
						"          IND_2_5113,",
						"          IND_2_5122,",
						"          IND_2_513,",
						"          IND_2_514,",
						"          IND_2_515,",
						"          IND_2_521,",
						"          IND_2_522,",
						"          IND_2_523,",
						"          IND_2_71,",
						"          IND_2_72,",
						"          IND_2_73,",
						"          IND_2_74,",
						"          IND_4_111,",
						"          IND_4_112,",
						"          IND_4_122,",
						"          IND_4_123,",
						"          IND_4_21,",
						"          IND_4_22,",
						"          IND_4_31,",
						"          IND_4_32,",
						"          IND_5_1,",
						"          IND_5_2,",
						"          IND_5_3,",
						"          IND_5_41,",
						"          IND_5_42,",
						"          IND_5_5,",
						"          IND_5_6,",
						"          IND_5_7,",
						"          IND_5_8,",
						"          IND_5_9,",
						"          IND_6_4,",
						"          IND_8_1311,",
						"          IND_8_1312,",
						"          IND_8_132,",
						"          IND_8_1411,",
						"          IND_8_1412,",
						"          IND_8_142,",
						"          IND_8_1511,",
						"          IND_8_1512,",
						"          IND_8_152,",
						"          IND_8_2311,",
						"          IND_8_2312,",
						"          IND_8_232,",
						"          IND_8_2411,",
						"          IND_8_2412,",
						"          IND_8_242,",
						"          IND_8_2511,",
						"          IND_8_2512,",
						"          IND_8_252,",
						"          IND_8_311,",
						"          IND_8_312,",
						"          IND_8_313,",
						"          IND_8_321,",
						"          IND_8_322,",
						"          IND_8_323,",
						"          IND_9_2,",
						"          IND_9_011,",
						"          IND_9_012,",
						"          IND_9_013,",
						"          IND_9_015,",
						"          IND_9_016,",
						"          IND_9_020,",
						"          IND_9_0223,",
						"          IND_9_0231,",
						"          IND_9_0232,",
						"          IND_9_0233,",
						"          IND_9_02411,",
						"          IND_9_02412,",
						"          IND_9_02413,",
						"          IND_9_02421,",
						"          IND_9_02422,",
						"          IND_9_02423,",
						"          IND_9_025,",
						"          IND_9_026,",
						"          IND_10_11,",
						"          IND_10_13,",
						"          IND_10_14,",
						"          IND_10_15,",
						"          IND_10_1613,",
						"          IND_10_1614,",
						"          IND_10_1615,",
						"          IND_10_162,",
						"          IND_10_17,",
						"          IND_10_18,",
						"          IND_10_21,",
						"          IND_10_24,",
						"          IND_10_25,",
						"          IND_10_2612,",
						"          IND_10_2613,",
						"          IND_10_2614,",
						"          IND_10_2615,",
						"          IND_10_262,",
						"          IND_10_27,",
						"          IND_10_28,",
						"          IND_11_11,",
						"          IND_11_12,",
						"          IND_11_13,",
						"          IND_11_14,",
						"          IND_11_15,",
						"          IND_11_51,",
						"          IND_11_52,",
						"          IND_11_53,",
						"          IND_11_54,",
						"          IND_11_55,",
						"          IND_16_1,",
						"          IND_16_2,",
						"          IND_16_3,",
						"          IND_16_51,",
						"          IND_16_52,",
						"          IND_16_53,",
						"          IND_16_54,",
						"          IND_16_61,",
						"          IND_16_62,",
						"          IND_16_63,",
						"          IND_16_64,",
						"          IND_16_7,",
						"          IND_16_8,",
						"          IND_17_1,",
						"          IND_17_2,",
						"          IND_17_3,",
						"          IND_19_1,",
						"          IND_19_2,",
						"          IND_19_3,",
						"          IND_19_4,",
						"          IND_19_5,",
						"          IND_20_1,",
						"          IND_20_2,",
						"          IND_20_3,",
						"          IND_20_4,",
						"          IND_20_5,",
						"          IND_21_1,",
						"          IND_21_2,",
						"          IND_21_3,",
						"          IND_21_4,",
						"          IND_5_10",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"FiltroDataModificacio aggregate(groupBy(CODI_BIBLIOTECA,",
						"          DATA_PERIODE),",
						"     DATA_MODIFICACIO = max(DATA_MODIFICACIO)) ~> MaxModif",
						"HistEntradaIndicadors filter(DATA_MODIFICACIO > addDays(currentTimestamp(), -1)) ~> FiltroDataModificacio",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as double,",
						"          DATA_PERIODE as date,",
						"          DATA_INSERCIO as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_BIBLIOTECA','CODI_INDICADOR','DATA_PERIODE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactIndicadors"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CARREGA_NO_PERIODICS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Hemos dejado el destino en Automapping asumiendo que el pivot hará el match. Si fallase, hay que poner explicitamente las columnas del pivot.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMFactIndicadors"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMDimIndicadors"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DMDimBibliotecas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_DATA_ENTRY",
								"type": "DatasetReference"
							},
							"name": "DMDataEntry"
						}
					],
					"transformations": [
						{
							"name": "Join"
						},
						{
							"name": "Pivot"
						},
						{
							"name": "Select"
						},
						{
							"name": "DataPeriode"
						},
						{
							"name": "FiltroNoPeriodics"
						},
						{
							"name": "FiltroMesAnterior"
						},
						{
							"name": "CrossJoin"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Data_Carrega as string",
						"}",
						"source(output(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as integer,",
						"          DATA_INSERCIO as date,",
						"          DATA_PERIODE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMFactIndicadors",
						"source(output(",
						"          ID_INDICADOR as string,",
						"          CODI_INDICADOR as string,",
						"          DESC_INDICADOR as string,",
						"          DESC_COMO_CALCULAR as string,",
						"          FLAG_FITXER as string,",
						"          FLAG_DATAENTRY as string,",
						"          FLAG_NO_PERIODICS as string,",
						"          ID_PARENT_INDICADOR as string,",
						"          FILA_LEVEL_1 as string,",
						"          FILA_LEVEL_2 as string,",
						"          FILA_LEVEL_3 as string,",
						"          FILA_LEVEL_4 as string,",
						"          FILA_LEVEL_5 as string,",
						"          COLUMNA_LEVEL_1 as string,",
						"          COLUMNA_LEVEL_2 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMDimIndicadors",
						"source(output(",
						"          ID_BIBLIOTECA as integer,",
						"          ID_AGENCY as string,",
						"          ID_USUARI as integer,",
						"          CODI_BIBLIOTECA as string,",
						"          ID_TIPUS as integer,",
						"          ID_MODUL as integer,",
						"          CODI_NIDEN as string,",
						"          ID_ESTAT as integer,",
						"          DESC_BIBLIOTECA as string,",
						"          DATA_ALTA_BIBLIO as timestamp,",
						"          DATA_BAIXA_BIBLIO as timestamp,",
						"          ID_TIPUS_VIA as integer,",
						"          DESC_VIA as string,",
						"          NUM_VIA as string,",
						"          INE_MUNICIPI as string,",
						"          ID_DISTRICTE as integer,",
						"          CP as string,",
						"          UTMX as double,",
						"          UTMY as double,",
						"          NUM_LONGITUD as double,",
						"          NUM_LATITUD as double,",
						"          NUM_TELEFON as string,",
						"          NUM_EXTENSIO as string,",
						"          NUM_FAX as string,",
						"          DESC_EMAIL as string,",
						"          DESC_WEB as string,",
						"          FLAG_BEG as boolean,",
						"          FLAG_SLPC as boolean,",
						"          ID_MAPA as integer,",
						"          ID_CATEGORIA as integer,",
						"          ID_TITULARITAT as integer,",
						"          ID_FORMA_ACCES as integer,",
						"          ES_CATALEG_COLECTIU_CCLP as boolean,",
						"          WEB_CATALEG_COLECTIU_CCLP as string,",
						"          ES_CATALEG_COLECTIU_DIP_BCN as boolean,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN as string,",
						"          ES_CATALEG_COLECTIU_CCUC as boolean,",
						"          WEB_CATALEG_COLECTIU_CCUC as string,",
						"          ES_CATALEG_COLECTIU_BEG as boolean,",
						"          WEB_CATALEG_COLECTIU_BEG as string,",
						"          ES_CATALEG_COLECTIU_ALTRES as boolean,",
						"          WEB_CATALEG_COLECTIU_ALTRES as string,",
						"          ID_DIRECTOR_TRACTAMENT as integer,",
						"          DESC_DIRECTOR_NOMB as string,",
						"          DESC_DIRECTOR_PRIMER_COGNOM as string,",
						"          DESC_DIRECTOR_SEGON_COGNOM as string,",
						"          FLAG_ADAPTADA as boolean,",
						"          DESC_OBSERVACIONS as string,",
						"          OBS_ITINERARIS as string,",
						"          DATA_ALTA as timestamp,",
						"          ID_USUARI_ALTA as integer,",
						"          DATA_MODIF as timestamp,",
						"          ID_USUARI_MODIF as integer,",
						"          DATA_BAIXA as timestamp,",
						"          ID_USUARI_BAIXA as integer,",
						"          ID_ADSCRIPCIO as integer,",
						"          ID_CATEGORIA_ESP as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DMDimBibliotecas",
						"FiltroMesAnterior, CrossJoin join(DMFactIndicadors@CODI_INDICADOR == DMDimIndicadors@CODI_INDICADOR,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join",
						"Select pivot(groupBy(CODI_BIBLIOTECA),",
						"     pivotBy(CODI_INDICADOR),",
						"     {} = sum(IND_VALOR),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> Pivot",
						"Join select(mapColumn(",
						"          CODI_BIBLIOTECA = DMDimBibliotecas@CODI_BIBLIOTECA,",
						"          CODI_INDICADOR = DMDimIndicadors@CODI_INDICADOR,",
						"          IND_VALOR",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select",
						"Pivot derive(DATA_PERIODE = toDate(concat($Data_Carrega,'01'),'yyyyMMdd')) ~> DataPeriode",
						"DMDimIndicadors filter(FLAG_NO_PERIODICS == '1') ~> FiltroNoPeriodics",
						"DMFactIndicadors filter(addMonths(toDate(concat($Data_Carrega,'01'),'yyyyMMdd'),-1) == DATA_PERIODE) ~> FiltroMesAnterior",
						"FiltroNoPeriodics, DMDimBibliotecas join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> CrossJoin",
						"DataPeriode sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CODI_BIBLIOTECA as string,",
						"          DATA_PERIODE as date,",
						"          IND_1_4 as double,",
						"          IND_2_1111 as double,",
						"          IND_2_1113 as double,",
						"          IND_2_1122 as double,",
						"          IND_2_113 as double,",
						"          IND_2_114 as double,",
						"          IND_2_115 as double,",
						"          IND_2_121 as double,",
						"          IND_2_122 as double,",
						"          IND_2_123 as double,",
						"          IND_2_2111 as double,",
						"          IND_2_2113 as double,",
						"          IND_2_2122 as double,",
						"          IND_2_213 as double,",
						"          IND_2_214 as double,",
						"          IND_2_215 as double,",
						"          IND_2_221 as double,",
						"          IND_2_222 as double,",
						"          IND_2_223 as double,",
						"          IND_2_4111 as double,",
						"          IND_2_4113 as double,",
						"          IND_2_4122 as double,",
						"          IND_2_413 as double,",
						"          IND_2_414 as double,",
						"          IND_2_415 as double,",
						"          IND_2_421 as double,",
						"          IND_2_422 as double,",
						"          IND_2_423 as double,",
						"          IND_2_5111 as double,",
						"          IND_2_5113 as double,",
						"          IND_2_5122 as double,",
						"          IND_2_513 as double,",
						"          IND_2_514 as double,",
						"          IND_2_515 as double,",
						"          IND_2_521 as double,",
						"          IND_2_522 as double,",
						"          IND_2_523 as double,",
						"          IND_2_71 as double,",
						"          IND_2_72 as double,",
						"          IND_2_73 as double,",
						"          IND_2_74 as double,",
						"          IND_4_111 as double,",
						"          IND_4_112 as double,",
						"          IND_4_122 as double,",
						"          IND_4_123 as double,",
						"          IND_4_21 as double,",
						"          IND_4_22 as double,",
						"          IND_4_31 as double,",
						"          IND_4_32 as double,",
						"          IND_5_1 as double,",
						"          IND_5_2 as double,",
						"          IND_5_3 as double,",
						"          IND_5_41 as double,",
						"          IND_5_42 as double,",
						"          IND_5_5 as double,",
						"          IND_5_6 as double,",
						"          IND_5_7 as double,",
						"          IND_5_8 as double,",
						"          IND_5_9 as double,",
						"          IND_6_4 as double,",
						"          IND_8_1311 as double,",
						"          IND_8_1312 as double,",
						"          IND_8_132 as double,",
						"          IND_8_1411 as double,",
						"          IND_8_1412 as double,",
						"          IND_8_142 as double,",
						"          IND_8_1511 as double,",
						"          IND_8_1512 as double,",
						"          IND_8_152 as double,",
						"          IND_8_2311 as double,",
						"          IND_8_2312 as double,",
						"          IND_8_232 as double,",
						"          IND_8_2411 as double,",
						"          IND_8_2412 as double,",
						"          IND_8_242 as double,",
						"          IND_8_2511 as double,",
						"          IND_8_2512 as double,",
						"          IND_8_252 as double,",
						"          IND_8_311 as double,",
						"          IND_8_312 as double,",
						"          IND_8_313 as double,",
						"          IND_8_321 as double,",
						"          IND_8_322 as double,",
						"          IND_8_323 as double,",
						"          IND_9_2 as double,",
						"          IND_9_011 as double,",
						"          IND_9_012 as double,",
						"          IND_9_013 as double,",
						"          IND_9_015 as double,",
						"          IND_9_016 as double,",
						"          IND_9_020 as double,",
						"          IND_9_0223 as double,",
						"          IND_9_0231 as double,",
						"          IND_9_0232 as double,",
						"          IND_9_0233 as double,",
						"          IND_9_02411 as double,",
						"          IND_9_02412 as double,",
						"          IND_9_02413 as double,",
						"          IND_9_02421 as double,",
						"          IND_9_02422 as double,",
						"          IND_9_02423 as double,",
						"          IND_9_025 as double,",
						"          IND_9_026 as double,",
						"          IND_10_11 as double,",
						"          IND_10_13 as double,",
						"          IND_10_14 as double,",
						"          IND_10_15 as double,",
						"          IND_10_1613 as double,",
						"          IND_10_1614 as double,",
						"          IND_10_1615 as double,",
						"          IND_10_162 as double,",
						"          IND_10_17 as double,",
						"          IND_10_18 as double,",
						"          IND_10_21 as double,",
						"          IND_10_24 as double,",
						"          IND_10_25 as double,",
						"          IND_10_2612 as double,",
						"          IND_10_2613 as double,",
						"          IND_10_2614 as double,",
						"          IND_10_2615 as double,",
						"          IND_10_262 as double,",
						"          IND_10_27 as double,",
						"          IND_10_28 as double,",
						"          IND_11_11 as double,",
						"          IND_11_12 as double,",
						"          IND_11_13 as double,",
						"          IND_11_14 as double,",
						"          IND_11_15 as double,",
						"          IND_11_51 as double,",
						"          IND_11_52 as double,",
						"          IND_11_53 as double,",
						"          IND_11_54 as double,",
						"          IND_11_55 as double,",
						"          IND_16_1 as double,",
						"          IND_16_2 as double,",
						"          IND_16_3 as double,",
						"          IND_16_51 as double,",
						"          IND_16_52 as double,",
						"          IND_16_53 as double,",
						"          IND_16_54 as double,",
						"          IND_16_61 as double,",
						"          IND_16_62 as double,",
						"          IND_16_63 as double,",
						"          IND_16_64 as double,",
						"          IND_16_7 as double,",
						"          IND_16_8 as double,",
						"          IND_17_1 as double,",
						"          IND_17_2 as double,",
						"          IND_17_3 as double,",
						"          IND_19_1 as double,",
						"          IND_19_2 as double,",
						"          IND_19_3 as double,",
						"          IND_19_4 as double,",
						"          IND_19_5 as double,",
						"          IND_20_1 as double,",
						"          IND_20_2 as double,",
						"          IND_20_3 as double,",
						"          IND_20_4 as double,",
						"          IND_20_5 as double,",
						"          IND_21_1 as double,",
						"          IND_21_2 as double,",
						"          IND_21_3 as double,",
						"          IND_21_4 as double,",
						"          IND_5_10 as double",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMDataEntry"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CARREGA_PROCEDENCIA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS1_BEG_FACT_TOTAL_EXEMPLARS_PROCEDENCIA",
								"type": "DatasetReference"
							},
							"name": "Procedencia"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ODS3_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "ODS3FactIndicadorsSink"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as integer,",
						"          DATA_INSERCIO as date,",
						"          DATA_PERIODE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Procedencia",
						"Procedencia sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as integer,",
						"          DATA_INSERCIO as date,",
						"          DATA_PERIODE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ODS3FactIndicadorsSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DIBICA_A_BIBLIOTEQUES_BEG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_DIBICA_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DimDIBICA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DimBiblioteques"
						}
					],
					"transformations": [
						{
							"name": "FiltroBibliotecasBeg"
						},
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_BIBLIOTECA as integer,",
						"          ID_USUARI as integer,",
						"          CODI_BIBLIOTECA as string,",
						"          ID_TIPUS as integer,",
						"          ID_MODUL as integer,",
						"          CODI_NIDEN as string,",
						"          ID_ESTAT as integer,",
						"          DESC_BIBLIOTECA as string,",
						"          DATA_ALTA_BIBLIO as timestamp,",
						"          DATA_BAIXA_BIBLIO as timestamp,",
						"          ID_TIPUS_VIA as integer,",
						"          DESC_VIA as string,",
						"          NUM_VIA as string,",
						"          INE_MUNICIPI as string,",
						"          ID_DISTRICTE as integer,",
						"          CP as string,",
						"          UTMX as double,",
						"          UTMY as double,",
						"          NUM_LONGITUD as double,",
						"          NUM_LATITUD as double,",
						"          NUM_TELEFON as string,",
						"          NUM_EXTENSIO as string,",
						"          NUM_FAX as string,",
						"          DESC_EMAIL as string,",
						"          DESC_WEB as string,",
						"          FLAG_BEG as boolean,",
						"          FLAG_SLPC as boolean,",
						"          ID_MAPA as integer,",
						"          ID_CATEGORIA as integer,",
						"          ID_TITULARITAT as integer,",
						"          ID_FORMA_ACCES as integer,",
						"          ES_CATALEG_COLECTIU_CCLP as boolean,",
						"          WEB_CATALEG_COLECTIU_CCLP as string,",
						"          ES_CATALEG_COLECTIU_DIP_BCN as boolean,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN as string,",
						"          ES_CATALEG_COLECTIU_CCUC as boolean,",
						"          WEB_CATALEG_COLECTIU_CCUC as string,",
						"          ES_CATALEG_COLECTIU_BEG as boolean,",
						"          WEB_CATALEG_COLECTIU_BEG as string,",
						"          ES_CATALEG_COLECTIU_ALTRES as boolean,",
						"          WEB_CATALEG_COLECTIU_ALTRES as string,",
						"          ID_DIRECTOR_TRACTAMENT as integer,",
						"          DESC_DIRECTOR_NOMB as string,",
						"          DESC_DIRECTOR_PRIMER_COGNOM as string,",
						"          DESC_DIRECTOR_SEGON_COGNOM as string,",
						"          FLAG_ADAPTADA as boolean,",
						"          DESC_OBSERVACIONS as string,",
						"          OBS_ITINERARIS as string,",
						"          DATA_ALTA as timestamp,",
						"          ID_USUARI_ALTA as integer,",
						"          DATA_MODIF as timestamp,",
						"          ID_USUARI_MODIF as integer,",
						"          DATA_BAIXA as timestamp,",
						"          ID_USUARI_BAIXA as integer,",
						"          ID_ADSCRIPCIO as integer,",
						"          ID_CATEGORIA_ESP as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDIBICA",
						"DimDIBICA filter(in([",
						"'E0018','E0076',",
						"  'E0090',",
						"'E0298',",
						"'E0308',",
						"'E0017',",
						"'E0408',",
						"'E0409',",
						"'E0410',",
						"'E0411',",
						"'E0105',",
						"'E0324',",
						"'E0091',",
						"'E0325',",
						"'E0021',",
						"'E0093',",
						"'E0086',",
						"'E0097',",
						"'E0089',",
						"'E0095',",
						"'E0003',",
						"'E0010',",
						"'E0096',",
						"'E0068',",
						"'E0037',",
						"'E0111',",
						"'E0048',",
						"'E0041',",
						"'E0027',",
						"'E0043',",
						"'E0065',",
						"'E0098',",
						"'E0032',",
						"'E0006',",
						"'E0085',",
						"'E0053',",
						"'E0297',",
						"'E0009',",
						"'E0069',",
						"'E0007',",
						"'E0072',",
						"'E0326',",
						"'E0320',",
						"'E0063',",
						"'E0064',",
						"'E0092',",
						"'E0028',",
						"'E0288',",
						"'E0073',",
						"'E0075',",
						"'E0050',",
						"'E0407',",
						"'E0221',",
						"'E0314',",
						"'E0312',",
						"'E0294',",
						"'E0313',",
						"'E0309',",
						"'E0317',",
						"'E0311',",
						"'E0310',",
						"'E0318',",
						"'E0280',",
						"'E0055',",
						"'E0049',",
						"'E0413',",
						"'E0052',",
						"'E0323',",
						"'E0322',",
						"'E0415'],CODI_BIBLIOTECA)) ~> FiltroBibliotecasBeg",
						"FiltroBibliotecasBeg alterRow(upsertIf(1==1)) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_BIBLIOTECA as integer,",
						"          ID_AGENCY as string,",
						"          ID_USUARI as integer,",
						"          CODI_BIBLIOTECA as string,",
						"          ID_TIPUS as integer,",
						"          ID_MODUL as integer,",
						"          CODI_NIDEN as string,",
						"          ID_ESTAT as integer,",
						"          DESC_BIBLIOTECA as string,",
						"          DATA_ALTA_BIBLIO as timestamp,",
						"          DATA_BAIXA_BIBLIO as timestamp,",
						"          ID_TIPUS_VIA as integer,",
						"          DESC_VIA as string,",
						"          NUM_VIA as string,",
						"          INE_MUNICIPI as string,",
						"          ID_DISTRICTE as integer,",
						"          CP as string,",
						"          UTMX as double,",
						"          UTMY as double,",
						"          NUM_LONGITUD as double,",
						"          NUM_LATITUD as double,",
						"          NUM_TELEFON as string,",
						"          NUM_EXTENSIO as string,",
						"          NUM_FAX as string,",
						"          DESC_EMAIL as string,",
						"          DESC_WEB as string,",
						"          FLAG_BEG as boolean,",
						"          FLAG_SLPC as boolean,",
						"          ID_MAPA as integer,",
						"          ID_CATEGORIA as integer,",
						"          ID_TITULARITAT as integer,",
						"          ID_FORMA_ACCES as integer,",
						"          ES_CATALEG_COLECTIU_CCLP as boolean,",
						"          WEB_CATALEG_COLECTIU_CCLP as string,",
						"          ES_CATALEG_COLECTIU_DIP_BCN as boolean,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN as string,",
						"          ES_CATALEG_COLECTIU_CCUC as boolean,",
						"          WEB_CATALEG_COLECTIU_CCUC as string,",
						"          ES_CATALEG_COLECTIU_BEG as boolean,",
						"          WEB_CATALEG_COLECTIU_BEG as string,",
						"          ES_CATALEG_COLECTIU_ALTRES as boolean,",
						"          WEB_CATALEG_COLECTIU_ALTRES as string,",
						"          ID_DIRECTOR_TRACTAMENT as integer,",
						"          DESC_DIRECTOR_NOMB as string,",
						"          DESC_DIRECTOR_PRIMER_COGNOM as string,",
						"          DESC_DIRECTOR_SEGON_COGNOM as string,",
						"          FLAG_ADAPTADA as boolean,",
						"          DESC_OBSERVACIONS as string,",
						"          OBS_ITINERARIS as string,",
						"          DATA_ALTA as timestamp,",
						"          ID_USUARI_ALTA as integer,",
						"          DATA_MODIF as timestamp,",
						"          ID_USUARI_MODIF as integer,",
						"          DATA_BAIXA as timestamp,",
						"          ID_USUARI_BAIXA as integer,",
						"          ID_ADSCRIPCIO as integer,",
						"          ID_CATEGORIA_ESP as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_BIBLIOTECA'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DimBiblioteques"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DIBICA_A_DIM_BIBLIOTEQUES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_DIBICA_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DimDIBICA"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DimBiblioteques"
						}
					],
					"transformations": [
						{
							"name": "Select"
						},
						{
							"name": "CatalegBEG"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_BIBLIOTECA as integer,",
						"          ID_USUARI as integer,",
						"          CODI_BIBLIOTECA as string,",
						"          ID_TIPUS as integer,",
						"          ID_MODUL as integer,",
						"          CODI_NIDEN as string,",
						"          ID_ESTAT as integer,",
						"          DESC_BIBLIOTECA as string,",
						"          DATA_ALTA_BIBLIO as timestamp,",
						"          DATA_BAIXA_BIBLIO as timestamp,",
						"          ID_TIPUS_VIA as integer,",
						"          DESC_VIA as string,",
						"          NUM_VIA as string,",
						"          INE_MUNICIPI as string,",
						"          ID_DISTRICTE as integer,",
						"          CP as string,",
						"          UTMX as double,",
						"          UTMY as double,",
						"          NUM_LONGITUD as double,",
						"          NUM_LATITUD as double,",
						"          NUM_TELEFON as string,",
						"          NUM_EXTENSIO as string,",
						"          NUM_FAX as string,",
						"          DESC_EMAIL as string,",
						"          DESC_WEB as string,",
						"          FLAG_BEG as boolean,",
						"          FLAG_SLPC as boolean,",
						"          ID_MAPA as integer,",
						"          ID_CATEGORIA as integer,",
						"          ID_TITULARITAT as integer,",
						"          ID_FORMA_ACCES as integer,",
						"          ES_CATALEG_COLECTIU_CCLP as boolean,",
						"          WEB_CATALEG_COLECTIU_CCLP as string,",
						"          ES_CATALEG_COLECTIU_DIP_BCN as boolean,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN as string,",
						"          ES_CATALEG_COLECTIU_CCUC as boolean,",
						"          WEB_CATALEG_COLECTIU_CCUC as string,",
						"          ES_CATALEG_COLECTIU_BEG as boolean,",
						"          WEB_CATALEG_COLECTIU_BEG as string,",
						"          ES_CATALEG_COLECTIU_ALTRES as boolean,",
						"          WEB_CATALEG_COLECTIU_ALTRES as string,",
						"          ID_DIRECTOR_TRACTAMENT as integer,",
						"          DESC_DIRECTOR_NOMB as string,",
						"          DESC_DIRECTOR_PRIMER_COGNOM as string,",
						"          DESC_DIRECTOR_SEGON_COGNOM as string,",
						"          FLAG_ADAPTADA as boolean,",
						"          DESC_OBSERVACIONS as string,",
						"          OBS_ITINERARIS as string,",
						"          DATA_ALTA as timestamp,",
						"          ID_USUARI_ALTA as integer,",
						"          DATA_MODIF as timestamp,",
						"          ID_USUARI_MODIF as integer,",
						"          DATA_BAIXA as timestamp,",
						"          ID_USUARI_BAIXA as integer,",
						"          ID_ADSCRIPCIO as integer,",
						"          ID_CATEGORIA_ESP as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimDIBICA",
						"CatalegBEG select(mapColumn(",
						"          ID_BIBLIOTECA,",
						"          ID_USUARI,",
						"          CODI_BIBLIOTECA,",
						"          ID_TIPUS,",
						"          ID_MODUL,",
						"          CODI_NIDEN,",
						"          ID_ESTAT,",
						"          DESC_BIBLIOTECA,",
						"          DATA_ALTA_BIBLIO,",
						"          DATA_BAIXA_BIBLIO,",
						"          ID_TIPUS_VIA,",
						"          DESC_VIA,",
						"          NUM_VIA,",
						"          INE_MUNICIPI,",
						"          ID_DISTRICTE,",
						"          CP,",
						"          UTMX,",
						"          UTMY,",
						"          NUM_LONGITUD,",
						"          NUM_LATITUD,",
						"          NUM_TELEFON,",
						"          NUM_EXTENSIO,",
						"          NUM_FAX,",
						"          DESC_EMAIL,",
						"          DESC_WEB,",
						"          FLAG_BEG,",
						"          FLAG_SLPC,",
						"          ID_MAPA,",
						"          ID_CATEGORIA,",
						"          ID_TITULARITAT,",
						"          ID_FORMA_ACCES,",
						"          ES_CATALEG_COLECTIU_CCLP,",
						"          WEB_CATALEG_COLECTIU_CCLP,",
						"          ES_CATALEG_COLECTIU_DIP_BCN,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN,",
						"          ES_CATALEG_COLECTIU_CCUC,",
						"          WEB_CATALEG_COLECTIU_CCUC,",
						"          ES_CATALEG_COLECTIU_BEG,",
						"          WEB_CATALEG_COLECTIU_BEG,",
						"          ES_CATALEG_COLECTIU_ALTRES,",
						"          WEB_CATALEG_COLECTIU_ALTRES,",
						"          ID_DIRECTOR_TRACTAMENT,",
						"          DESC_DIRECTOR_NOMB,",
						"          DESC_DIRECTOR_PRIMER_COGNOM,",
						"          DESC_DIRECTOR_SEGON_COGNOM,",
						"          FLAG_ADAPTADA,",
						"          DESC_OBSERVACIONS,",
						"          OBS_ITINERARIS,",
						"          DATA_ALTA,",
						"          ID_USUARI_ALTA,",
						"          DATA_MODIF,",
						"          ID_USUARI_MODIF,",
						"          DATA_BAIXA,",
						"          ID_USUARI_BAIXA,",
						"          ID_ADSCRIPCIO,",
						"          ID_CATEGORIA_ESP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select",
						"DimDIBICA filter(ES_CATALEG_COLECTIU_BEG) ~> CatalegBEG",
						"Select sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_BIBLIOTECA as integer,",
						"          ID_AGENCY as string,",
						"          ID_USUARI as integer,",
						"          CODI_BIBLIOTECA as string,",
						"          ID_TIPUS as integer,",
						"          ID_MODUL as integer,",
						"          CODI_NIDEN as string,",
						"          ID_ESTAT as integer,",
						"          DESC_BIBLIOTECA as string,",
						"          DATA_ALTA_BIBLIO as timestamp,",
						"          DATA_BAIXA_BIBLIO as timestamp,",
						"          ID_TIPUS_VIA as integer,",
						"          DESC_VIA as string,",
						"          NUM_VIA as string,",
						"          INE_MUNICIPI as string,",
						"          ID_DISTRICTE as integer,",
						"          CP as string,",
						"          UTMX as double,",
						"          UTMY as double,",
						"          NUM_LONGITUD as double,",
						"          NUM_LATITUD as double,",
						"          NUM_TELEFON as string,",
						"          NUM_EXTENSIO as string,",
						"          NUM_FAX as string,",
						"          DESC_EMAIL as string,",
						"          DESC_WEB as string,",
						"          FLAG_BEG as boolean,",
						"          FLAG_SLPC as boolean,",
						"          ID_MAPA as integer,",
						"          ID_CATEGORIA as integer,",
						"          ID_TITULARITAT as integer,",
						"          ID_FORMA_ACCES as integer,",
						"          ES_CATALEG_COLECTIU_CCLP as boolean,",
						"          WEB_CATALEG_COLECTIU_CCLP as string,",
						"          ES_CATALEG_COLECTIU_DIP_BCN as boolean,",
						"          WEB_CATALEG_COLECTIU_DIP_BCN as string,",
						"          ES_CATALEG_COLECTIU_CCUC as boolean,",
						"          WEB_CATALEG_COLECTIU_CCUC as string,",
						"          ES_CATALEG_COLECTIU_BEG as boolean,",
						"          WEB_CATALEG_COLECTIU_BEG as string,",
						"          ES_CATALEG_COLECTIU_ALTRES as boolean,",
						"          WEB_CATALEG_COLECTIU_ALTRES as string,",
						"          ID_DIRECTOR_TRACTAMENT as integer,",
						"          DESC_DIRECTOR_NOMB as string,",
						"          DESC_DIRECTOR_PRIMER_COGNOM as string,",
						"          DESC_DIRECTOR_SEGON_COGNOM as string,",
						"          FLAG_ADAPTADA as boolean,",
						"          DESC_OBSERVACIONS as string,",
						"          OBS_ITINERARIS as string,",
						"          DATA_ALTA as timestamp,",
						"          ID_USUARI_ALTA as integer,",
						"          DATA_MODIF as timestamp,",
						"          ID_USUARI_MODIF as integer,",
						"          DATA_BAIXA as timestamp,",
						"          ID_USUARI_BAIXA as integer,",
						"          ID_ADSCRIPCIO as integer,",
						"          ID_CATEGORIA_ESP as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CODI_BIBLIOTECA,",
						"          CODI_NIDEN,",
						"          ESTAT = ID_ESTAT,",
						"          TIPUS = ID_TIPUS,",
						"          CATEGORIA_ESPECIALITZADA = ID_CATEGORIA,",
						"          DESC_BIBLIOTECA,",
						"          DATA_ALTA = DATA_ALTA_BIBLIO,",
						"          DATA_BAIXA,",
						"          ADAPTADA = FLAG_ADAPTADA,",
						"          FORMA_ACCESS = ID_FORMA_ACCES,",
						"          TITULARITAT = ID_TITULARITAT,",
						"          MUNICIPI = INE_MUNICIPI,",
						"          {C.P.} = CP,",
						"          UTMX,",
						"          UTMY,",
						"          {TELÈFON} = NUM_TELEFON,",
						"          EXT = NUM_EXTENSIO,",
						"          FAX = NUM_FAX,",
						"          WEB = DESC_WEB,",
						"          TRACTAMENT_DIRECT = ID_DIRECTOR_TRACTAMENT,",
						"          NOM_DIRECT = DESC_DIRECTOR_NOMB,",
						"          PRIMER_COGNOM = DESC_DIRECTOR_PRIMER_COGNOM,",
						"          SEGON_COGNOM = DESC_DIRECTOR_SEGON_COGNOM,",
						"          OBSERVACIONS = DESC_OBSERVACIONS",
						"     )) ~> DimBiblioteques"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DIM_TIME')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CSV_TIME",
								"type": "DatasetReference"
							},
							"name": "CSVTime"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TIME",
								"type": "DatasetReference"
							},
							"name": "DMDimTime"
						}
					],
					"transformations": [
						{
							"name": "CambiarTipo"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DATA as string,",
						"          FLAG_ES_LABORABLE as string,",
						"          DATA_ANY as string,",
						"          NUM_SEMESTRE as string,",
						"          NUM_TRIMESTRE as string,",
						"          DATA_ANY_TRIMESTRE as string,",
						"          DATA_MES as string,",
						"          DATA_MES_NN as string,",
						"          DATA_ANY_MES as string,",
						"          NUM_DIA as string,",
						"          NUM_DIA_DD as string,",
						"          NUM_DIA_SEMANA as string,",
						"          DESC_MES as string,",
						"          DESC_MES_CAT as string,",
						"          DESC_DIA as string,",
						"          DESC_DIA_CAT as string,",
						"          NUM_SEMANA as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CSVTime",
						"CSVTime derive(DATA_ANY = toInteger(DATA_ANY),",
						"          DATA_MES = toInteger(DATA_MES)) ~> CambiarTipo",
						"CambiarTipo sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          DATA as string,",
						"          FLAG_ES_LABORABLE as string,",
						"          DATA_ANY as integer,",
						"          NUM_SEMESTRE as string,",
						"          NUM_TRIMESTRE as string,",
						"          DATA_ANY_TRIMESTRE as string,",
						"          DATA_MES as integer,",
						"          DATA_MES_NN as string,",
						"          DATA_ANY_MES as string,",
						"          NUM_DIA as string,",
						"          NUM_DIA_DD as string,",
						"          NUM_DIA_SEMANA as string,",
						"          DESC_MES as string,",
						"          DESC_MES_CAT as string,",
						"          DESC_DIA as string,",
						"          DESC_DIA_CAT as string,",
						"          NUM_SEMANA as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMDimTime"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BAIXES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "ODSFactIndicadors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMFactIndicadors"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as integer,",
						"          DATA_INSERCIO as date,",
						"          DATA_PERIODE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactIndicadors",
						"ODSFactIndicadors alterRow(upsertIf(1==1)) ~> AlterRow",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as double,",
						"          DATA_PERIODE as date,",
						"          DATA_INSERCIO as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_BIBLIOTECA','CODI_INDICADOR','DATA_PERIODE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactIndicadors"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_AMBIT_TERRITORIAL')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_BEG_DIM_TERRITORIAL_AMBIT_TERRITORIAL",
								"type": "DatasetReference"
							},
							"name": "STGAmbitTerritorial"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TERRITORIAL_AMBIT_TERRITORIAL",
								"type": "DatasetReference"
							},
							"name": "DMAmbitTerritorial"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          IDAmbit as string,",
						"          Nom_Ambit as string,",
						"          Data_baixa as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGAmbitTerritorial",
						"STGAmbitTerritorial sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_AMBIT_TERRITORIAL as string,",
						"          DESC_AMBIT_TERRITORIAL as string,",
						"          DATA_BAIXA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ID_AMBIT_TERRITORIAL = IDAmbit,",
						"          DESC_AMBIT_TERRITORIAL = Nom_Ambit,",
						"          DATA_BAIXA = Data_baixa",
						"     )) ~> DMAmbitTerritorial"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_COMARCA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_BEG_DIM_TERRITORIAL_COMARCA",
								"type": "DatasetReference"
							},
							"name": "STGComarca"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TERRITORIAL_COMARCA",
								"type": "DatasetReference"
							},
							"name": "DMComarca"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          INE_Comarca as string,",
						"          IDAmbit as string,",
						"          Nom_Comarca as string,",
						"          Nom_Comarca_cat as string,",
						"          cod_sstt as integer,",
						"          Data_baixa as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGComarca",
						"STGComarca sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          INE_COMARCA as string,",
						"          ID_AMBIT_TERRITORIAL as string,",
						"          DESC_COMARCA as string,",
						"          DESC_COMARCA_CAT as string,",
						"          CODI_SSTT as integer,",
						"          DATA_BAIXA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          INE_COMARCA = INE_Comarca,",
						"          ID_AMBIT_TERRITORIAL = IDAmbit,",
						"          DESC_COMARCA = Nom_Comarca,",
						"          DESC_COMARCA_CAT = Nom_Comarca_cat,",
						"          CODI_SSTT = cod_sstt,",
						"          DATA_BAIXA = Data_baixa",
						"     )) ~> DMComarca"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_DIM_AUTOPRESTECS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_DIM_AUTOPRESTECS",
								"type": "DatasetReference"
							},
							"name": "ODSDimAutoprestecs"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_AUTOPRESTECS",
								"type": "DatasetReference"
							},
							"name": "DMDimAutoprestecs"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tCODI_BIBLIOTECA as string,\n\t\tDESC_BIBLIOTECA as string,\n\t\tID_AGENCY as string,\n\t\tTERMINAL as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSDimAutoprestecs\nODSDimAutoprestecs sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DMDimAutoprestecs"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_DIM_BIBLIOTEQUES')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "ODSDimBiblioteques"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_BIBLIOTEQUES",
								"type": "DatasetReference"
							},
							"name": "DMDimBiblioteques"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tCODI_BIBLIOTECA as string,\n\t\tCODI_NIDEN as string,\n\t\tESTAT as string,\n\t\tTIPUS as string,\n\t\tCATEGORIA_ESPECIALITZADA as string,\n\t\tDESC_BIBLIOTECA as string,\n\t\tID_AGENCY as string,\n\t\tTERMINAL as string,\n\t\tDATA_ALTA as string,\n\t\tDATA_BAIXA as string,\n\t\tADAPTADA as string,\n\t\tFORMA_ACCESS as string,\n\t\tTITULARITAT as string,\n\t\t{ADREÇA} as string,\n\t\tMUNICIPI as string,\n\t\t{C.P.} as string,\n\t\tCOMARCA as string,\n\t\t{ÀMBIT TERRITORIAL} as string,\n\t\tSSTT as string,\n\t\tPROVINCIA as string,\n\t\tUTMX as string,\n\t\tUTMY as string,\n\t\t{MÒDUL_TERRITORIAL} as string,\n\t\t{TELÈFON} as string,\n\t\tEXT as string,\n\t\tFAX as string,\n\t\tWEB as string,\n\t\t{ADREÇA_ELCT} as string,\n\t\t{ADREÇA_ELECT_2} as string,\n\t\tTRACTAMENT_DIRECT as string,\n\t\tNOM_DIRECT as string,\n\t\tPRIMER_COGNOM as string,\n\t\tSEGON_COGNOM as string,\n\t\tOBSERVACIONS as string,\n\t\tGRUP as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSDimBiblioteques\nODSDimBiblioteques sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_BIBLIOTECA as integer,\n\t\tID_AGENCY as string,\n\t\tID_USUARI as integer,\n\t\tCODI_BIBLIOTECA as string,\n\t\tID_TIPUS as integer,\n\t\tID_MODUL as integer,\n\t\tCODI_NIDEN as string,\n\t\tID_ESTAT as integer,\n\t\tDESC_BIBLIOTECA as string,\n\t\tDATA_ALTA_BIBLIO as timestamp,\n\t\tDATA_BAIXA_BIBLIO as timestamp,\n\t\tID_TIPUS_VIA as integer,\n\t\tDESC_VIA as string,\n\t\tNUM_VIA as string,\n\t\tINE_MUNICIPI as string,\n\t\tID_DISTRICTE as integer,\n\t\tCP as string,\n\t\tUTMX as double,\n\t\tUTMY as double,\n\t\tNUM_LONGITUD as double,\n\t\tNUM_LATITUD as double,\n\t\tNUM_TELEFON as string,\n\t\tNUM_EXTENSIO as string,\n\t\tNUM_FAX as string,\n\t\tDESC_EMAIL as string,\n\t\tDESC_WEB as string,\n\t\tFLAG_BEG as boolean,\n\t\tFLAG_SLPC as boolean,\n\t\tID_MAPA as integer,\n\t\tID_CATEGORIA as integer,\n\t\tID_TITULARITAT as integer,\n\t\tID_FORMA_ACCES as integer,\n\t\tES_CATALEG_COLECTIU_CCLP as boolean,\n\t\tWEB_CATALEG_COLECTIU_CCLP as string,\n\t\tES_CATALEG_COLECTIU_DIP_BCN as boolean,\n\t\tWEB_CATALEG_COLECTIU_DIP_BCN as string,\n\t\tES_CATALEG_COLECTIU_CCUC as boolean,\n\t\tWEB_CATALEG_COLECTIU_CCUC as string,\n\t\tES_CATALEG_COLECTIU_BEG as boolean,\n\t\tWEB_CATALEG_COLECTIU_BEG as string,\n\t\tES_CATALEG_COLECTIU_ALTRES as boolean,\n\t\tWEB_CATALEG_COLECTIU_ALTRES as string,\n\t\tID_DIRECTOR_TRACTAMENT as integer,\n\t\tDESC_DIRECTOR_NOMB as string,\n\t\tDESC_DIRECTOR_PRIMER_COGNOM as string,\n\t\tDESC_DIRECTOR_SEGON_COGNOM as string,\n\t\tFLAG_ADAPTADA as boolean,\n\t\tDESC_OBSERVACIONS as string,\n\t\tOBS_ITINERARIS as string,\n\t\tDATA_ALTA as timestamp,\n\t\tID_USUARI_ALTA as integer,\n\t\tDATA_MODIF as timestamp,\n\t\tID_USUARI_MODIF as integer,\n\t\tDATA_BAIXA as timestamp,\n\t\tID_USUARI_BAIXA as integer,\n\t\tID_ADSCRIPCIO as integer,\n\t\tID_CATEGORIA_ESP as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DMDimBiblioteques"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_DIM_LOCATIONS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_DIM_LOCATIONS",
								"type": "DatasetReference"
							},
							"name": "ODSDimLocations"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_LOCATIONS",
								"type": "DatasetReference"
							},
							"name": "DMDimLocations"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tCODI_BIBLIOTECA as string,\n\t\tID_AGENCY as string,\n\t\tTERMINAL as string,\n\t\tLOCATION as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSDimLocations\nODSDimLocations sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_LOCATION as string,\n\t\tCODI_BIBLIOTECA as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DMDimLocations"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_DIM_REL_P_TYPE_INDICADOR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_DIM_REL_P_TYPE_INDICADOR",
								"type": "DatasetReference"
							},
							"name": "ODSDimRelPTypeIndicador"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_REL_P_TYPE_INDICADOR",
								"type": "DatasetReference"
							},
							"name": "DMDimRelPTypeIndicador"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tDESC_CONSULTA as string,\n\t\tP_TYPE as string,\n\t\tCODI_INDICADOR as string,\n\t\tID_INDICADOR as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSDimRelPTypeIndicador\nODSDimRelPTypeIndicador sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tDESC_CONSULTA as string,\n\t\tP_TYPE as string,\n\t\tCODI_INDICADOR as string,\n\t\tID_INDICADOR as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DMDimRelPTypeIndicador"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_FACT_INDICADOR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "ODSFactIndicadors"
						},
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_PRESTECS_ANUALS",
								"type": "DatasetReference"
							},
							"name": "PrestecsAnuals"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMFactIndicadors"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "Union"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as decimal(17,6),",
						"          DATA_INSERCIO as date,",
						"          DATA_PERIODE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODSFactIndicadors",
						"source(output(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as integer,",
						"          DATA_PERIODE as date,",
						"          DATA_INSERCIO as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PrestecsAnuals",
						"Union alterRow(upsertIf(1==1)) ~> AlterRow",
						"ODSFactIndicadors, PrestecsAnuals union(byName: true)~> Union",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ID_AGENCY as string,",
						"          CODI_BIBLIOTECA as string,",
						"          CODI_INDICADOR as string,",
						"          IND_VALOR as double,",
						"          DATA_PERIODE as date,",
						"          DATA_INSERCIO as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CODI_BIBLIOTECA','CODI_INDICADOR','DATA_PERIODE'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DMFactIndicadors"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_FACT_INDICADORS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ODS_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "ODSFactIndicadors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_FACT_INDICADORS",
								"type": "DatasetReference"
							},
							"name": "DMFactIndicadors"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tID_AGENCY as string,\n\t\tCODI_BIBLIOTECA as string,\n\t\tCODI_INDICADOR as string,\n\t\tVALOR as integer,\n\t\tDATA_INSERCIO as date,\n\t\tPERIODE as date\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ODSFactIndicadors\nODSFactIndicadors sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tID_AGENCY as string,\n\t\tCODI_BIBLIOTECA as string,\n\t\tCODI_INDICADOR as string,\n\t\tIND_VALOR as double,\n\t\tDATA_PERIODE as date,\n\t\tDATA_INSERCIO as date\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DMFactIndicadors"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_MUNICIPI')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_BEG_DIM_TERRITORIAL_MUNICIPI",
								"type": "DatasetReference"
							},
							"name": "STGMunicipi"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TERRITORIAL_MUNICIPI",
								"type": "DatasetReference"
							},
							"name": "DMMunicipi"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          INE_Municipi as string,",
						"          INE_Comarca as string,",
						"          INE_Provincia as string,",
						"          Nom_Municipi as string,",
						"          Nom_Municipi_cat as string,",
						"          CP as string,",
						"          Altitud as integer,",
						"          Superficie as decimal(6,2),",
						"          Cap_Pais as boolean,",
						"          Cap_Comunitat_Autonoma as boolean,",
						"          Cap_Provincia as boolean,",
						"          Cap_Comarca as boolean,",
						"          IDAmbit as string,",
						"          cod_sstt as integer,",
						"          Data_baixa as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGMunicipi",
						"STGMunicipi sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          INE_MUNICIPI as string,",
						"          INE_COMARCA as string,",
						"          INE_PROVINCIA as string,",
						"          DESC_MUNICIPI as string,",
						"          DESC_MUNICIPI_CAT as string,",
						"          CP as string,",
						"          NUM_ALTITUD as integer,",
						"          NUM_SUPERFICIE as decimal(6,2),",
						"          FLAG_CAPITAL_PAIS as boolean,",
						"          FLAG_CAPITAL_COMUNIDAD_AUTONOMA as boolean,",
						"          FLAG_CAPITAL_PROVINCIA as boolean,",
						"          FLAG_CAPITAL_COMARCA as boolean,",
						"          ID_AMBIT_TERRITORIAL as string,",
						"          CODI_SSTT as integer,",
						"          DATA_BAIXA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          INE_MUNICIPI = INE_Municipi,",
						"          INE_COMARCA = INE_Comarca,",
						"          INE_PROVINCIA = INE_Provincia,",
						"          DESC_MUNICIPI = Nom_Municipi,",
						"          DESC_MUNICIPI_CAT = Nom_Municipi_cat,",
						"          CP,",
						"          NUM_ALTITUD = Altitud,",
						"          NUM_SUPERFICIE = Superficie,",
						"          FLAG_CAPITAL_PAIS = Cap_Pais,",
						"          FLAG_CAPITAL_COMUNIDAD_AUTONOMA = Cap_Comunitat_Autonoma,",
						"          FLAG_CAPITAL_PROVINCIA = Cap_Provincia,",
						"          FLAG_CAPITAL_COMARCA = Cap_Comarca,",
						"          ID_AMBIT_TERRITORIAL = IDAmbit,",
						"          CODI_SSTT = cod_sstt,",
						"          DATA_BAIXA = Data_baixa",
						"     )) ~> DMMunicipi"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_DM_BEG_PROVINCIA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "STG_BEG_DIM_TERRITORIAL_PROVINCIA",
								"type": "DatasetReference"
							},
							"name": "STGProvincia"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DM_BEG_DIM_TERRITORIAL_PROVINCIA",
								"type": "DatasetReference"
							},
							"name": "DMProvincia"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          INE_Provincia as string,",
						"          INE_Comunitat_Autonoma as string,",
						"          Nom_Provincia as string,",
						"          Nom_Provincia_cat as string,",
						"          Data_baixa as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> STGProvincia",
						"STGProvincia sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          INE_PROVINCIA as string,",
						"          INE_COMUNITAT_AUTONOMA as string,",
						"          DESC_PROVINCIA as string,",
						"          DESC_PROVINCIA_CAT as string,",
						"          DATA_BAIXA as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          INE_PROVINCIA = INE_Provincia,",
						"          INE_COMUNITAT_AUTONOMA = INE_Comunitat_Autonoma,",
						"          DESC_PROVINCIA = Nom_Provincia,",
						"          DESC_PROVINCIA_CAT = Nom_Provincia_cat,",
						"          DATA_BAIXA = Data_baixa",
						"     )) ~> DMProvincia"
					]
				}
			},
			"dependsOn": []
		}
	]
}